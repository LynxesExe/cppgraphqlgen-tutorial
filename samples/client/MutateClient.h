// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef MUTATECLIENT_H
#define MUTATECLIENT_H

#include "graphqlservice/GraphQLClient.h"
#include "graphqlservice/GraphQLService.h"

// Check if the library version is compatible with clientgen 3.6.0
static_assert(graphql::internal::MajorVersion == 3, "regenerate with clientgen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 6, "regenerate with clientgen: minor version mismatch");

#include <memory>
#include <string>
#include <string_view>
#include <vector>

namespace graphql {
namespace mutate {

/** Operation: mutation CompleteTaskMutation

# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

mutation CompleteTaskMutation($input: CompleteTaskInput! = {id: "ZmFrZVRhc2tJZA==", isComplete: true, clientMutationId: "Hi There!"}) {
  completedTask: completeTask(input: $input) {
    completedTask: task {
      completedTaskId: id
      title
      isComplete
    }
    clientMutationId
  }
}

**/

// Return the original text of the request document.
std::string_view GetRequestText() noexcept;


enum class TaskState
{
	New,
	Started,
	Complete,
	Unassigned
};

struct CompleteTaskInput
{
};

namespace object {

class Query;
class PageInfo;
class AppointmentEdge;
class AppointmentConnection;
class TaskEdge;
class TaskConnection;
class FolderEdge;
class FolderConnection;
class CompleteTaskPayload;
class Mutation;
class Subscription;
class Appointment;
class Task;
class Folder;
class NestedType;
class Expensive;

} /* namespace object */

struct Node
{
};

namespace object {

} /* namespace object */

class Operations
	: public service::Request
{
public:
	explicit Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation, std::shared_ptr<object::Subscription> subscription);

private:
	std::shared_ptr<object::Query> _query;
	std::shared_ptr<object::Mutation> _mutation;
	std::shared_ptr<object::Subscription> _subscription;
};

std::shared_ptr<client::Client> GetClient();

} /* namespace mutate */
} /* namespace graphql */

#endif // MUTATECLIENT_H
