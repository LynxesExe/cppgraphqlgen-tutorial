// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef SUBSCRIBECLIENT_H
#define SUBSCRIBECLIENT_H

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "graphqlservice/GraphQLParse.h"
#include "graphqlservice/GraphQLResponse.h"

#include "graphqlservice/internal/Version.h"

// Check if the library version is compatible with clientgen 3.6.0
static_assert(graphql::internal::MajorVersion == 3, "regenerate with clientgen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 6, "regenerate with clientgen: minor version mismatch");

#include <optional>
#include <string>
#include <vector>

namespace graphql::subscription::TestSubscription {

/** Operation: subscription TestSubscription
 **
 ** # Copyright (c) Microsoft Corporation. All rights reserved.
 ** # Licensed under the MIT License.
 ** 
 ** subscription TestSubscription {
 **   nextAppointment: nextAppointmentChange {
 **     nextAppointmentId: id
 **     when
 **     subject
 **     isNow
 **   }
 ** }
 **
 **/

// Return the original text of the request document.
const std::string& GetRequestText() noexcept;

// Return a pre-parsed, pre-validated request object.
const peg::ast& GetRequestObject() noexcept;

struct Response
{
	struct nextAppointment_Appointment
	{
		response::IdType nextAppointmentId;
		std::optional<response::Value> when;
		std::optional<response::StringType> subject;
		response::BooleanType isNow;
	};

	std::optional<nextAppointment_Appointment> nextAppointment;
};

Response parseResponse(response::Value&& response);

} /* namespace graphql::subscription::TestSubscription */

#endif // SUBSCRIBECLIENT_H
