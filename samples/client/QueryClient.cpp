// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "graphqlservice/introspection/Introspection.h"

#include "graphqlservice/GraphQLParse.h"

#include <algorithm>
#include <array>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <string_view>
#include <tuple>
#include <vector>

using namespace std::literals;

namespace graphql {
namespace service {

static const std::array<std::string_view, 4> s_namesTaskState = {
	"New",
	"Started",
	"Complete",
	"Unassigned"
};

template <>
query::TaskState ModifiedArgument<query::TaskState>::convert(const response::Value& value)
{
	if (!value.maybe_enum())
	{
		throw service::schema_exception { { "not a valid TaskState value" } };
	}

	auto itr = std::find(s_namesTaskState.cbegin(), s_namesTaskState.cend(), value.get<response::StringType>());

	if (itr == s_namesTaskState.cend())
	{
		throw service::schema_exception { { "not a valid TaskState value" } };
	}

	return static_cast<query::TaskState>(itr - s_namesTaskState.cbegin());
}

template <>
std::future<service::ResolverResult> ModifiedResult<query::TaskState>::convert(service::FieldResult<query::TaskState>&& result, ResolverParams&& params)
{
	return resolve(std::move(result), std::move(params),
		[](query::TaskState&& value, const ResolverParams&)
		{
			response::Value result(response::Type::EnumValue);

			result.set<response::StringType>(std::string(s_namesTaskState[static_cast<size_t>(value)]));

			return result;
		});
}

template <>
query::CompleteTaskInput ModifiedArgument<query::CompleteTaskInput>::convert(const response::Value& value)
{
	const auto defaultValue = []()
	{
		response::Value values(response::Type::Map);
		response::Value entry;


		return values;
	}();


	return {
		std::move(valueId),
		std::move(valueIsComplete),
		std::move(valueClientMutationId)
	};
}

} /* namespace service */

namespace query {

std::string_view GetRequestText() noexcept
{
	return R"gql(# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

query {
  appointments {
    edges {
      node {
        id
        subject
        when
        isNow
        __typename
      }
    }
  }
  tasks {
    edges {
      node {
        id
        title
        isComplete
        __typename
      }
    }
  }
  unreadCounts {
    edges {
      node {
        id
        name
        unreadCount
        __typename
      }
    }
  }
})gql"sv;
}
namespace object {

} /* namespace object */

Operations::Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation, std::shared_ptr<object::Subscription> subscription)
	: service::Request({
		{ "query", query },
		{ "mutation", mutation },
		{ "subscription", subscription }
	}, GetClient())
	, _query(std::move(query))
	, _mutation(std::move(mutation))
	, _subscription(std::move(subscription))
{
}

std::shared_ptr<client::Client> GetClient()
{
	static std::weak_ptr<client::Client> s_wpClient;
	auto client = s_wpClient.lock();

	if (!client)
	{
		client = std::make_shared<client::Client>(false);
		AddTypesToClient(client);
		s_wpClient = client;
	}

	return client;
}

} /* namespace query */
} /* namespace graphql */
