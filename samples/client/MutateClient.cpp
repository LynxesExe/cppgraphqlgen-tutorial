// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "MutateClient.h"

#include "graphqlservice/GraphQLClient.h"

#include <algorithm>
#include <array>
#include <stdexcept>
#include <sstream>
#include <string_view>

using namespace std::literals;

namespace graphql::mutation::CompleteTaskMutation {

const std::string& GetRequestText() noexcept
{
	static const auto s_request = R"gql(
		# Copyright (c) Microsoft Corporation. All rights reserved.
		# Licensed under the MIT License.
		
		mutation CompleteTaskMutation($input: CompleteTaskInput! = {id: "ZmFrZVRhc2tJZA==", isComplete: true, clientMutationId: "Hi There!"}) {
		  completedTask: completeTask(input: $input) {
		    completedTask: task {
		      completedTaskId: id
		      title
		      isComplete
		    }
		    clientMutationId
		  }
		}
	)gql"s;

	return s_request;
}

const peg::ast& GetRequestObject() noexcept
{
	static const auto s_request = []() noexcept {
		auto ast = peg::parseString(GetRequestText());

		// This has already been validated against the schema by clientgen.
		ast.validated = true;

		return ast;
	}();

	return s_request;
}

static const std::array<std::string_view, 4> s_namesTaskState = {
	"New"sv,
	"Started"sv,
	"Complete"sv,
	"Unassigned"sv,
};

response::Value serializeTaskState(TaskState value)
{
	response::Value result(response::Type::EnumValue);

	result.set<response::StringType>(response::StringType { s_namesTaskState[static_cast<size_t>(value)] });

	return result;
}

response::Value serializeCompleteTaskInput(Variables::CompleteTaskInput&& inputValue)
{
	response::Value result;

	// response::IdType id;
	// std::optional<TaskState> testTaskState;
	// std::optional<response::BooleanType> isComplete;
	// std::optional<response::StringType> clientMutationId;

	return result;
}

response::Value serializeVariables(Variables&& variables)
{
	response::Value result;

	// input = serializeCompleteTaskInput(std::move(variables.input));

	return result;
}

TaskState parseTaskState(const response::Value& value)
{
	if (!value.maybe_enum())
	{
		throw std::logic_error { "not a valid TaskState value" };
	}

	const auto itr = std::find(s_namesTaskState.cbegin(), s_namesTaskState.cend(), value.get<response::StringType>());

	if (itr == s_namesTaskState.cend())
	{
		throw std::logic_error { "not a valid TaskState value" };
	}

	return static_cast<TaskState>(itr - s_namesTaskState.cbegin());
}

Response parseResponse(response::Value&& response)
{
	Response result;

	// completedTask_CompleteTaskPayload completedTask;

	return result;
}

} // namespace graphql::mutation::CompleteTaskMutation
