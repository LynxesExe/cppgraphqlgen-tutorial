// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef NESTEDINPUTCLIENT_H
#define NESTEDINPUTCLIENT_H

#include "graphqlservice/GraphQLClient.h"
#include "graphqlservice/GraphQLParse.h"
#include "graphqlservice/GraphQLResponse.h"

#include "graphqlservice/internal/Version.h"

// Check if the library version is compatible with clientgen 4.2.0
static_assert(graphql::internal::MajorVersion == 4, "regenerate with clientgen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 2, "regenerate with clientgen: minor version mismatch");

#include <optional>
#include <string>
#include <vector>

/// <summary>
/// Operation: query testQuery
/// </summary>
/// <code class="language-graphql">
/// query testQuery($stream: InputABCD!) {
///   control {
///     test(new: $stream) {
///       id
///     }
///   }
/// }
/// </code>
namespace graphql::client::query::testQuery {

// Return the original text of the request document.
const std::string& GetRequestText() noexcept;

// Return a pre-parsed, pre-validated request object.
const peg::ast& GetRequestObject() noexcept;

struct Variables
{
	struct InputA
	{
		bool a {};
	};

	struct InputB
	{
		double b {};
	};

	struct InputBC;

	struct InputABCD
	{
		std::string d {};
		InputA a {};
		InputB b {};
		std::vector<InputBC> bc {};
	};

	struct InputBC
	{
		response::IdType c {};
		InputB b {};
	};

	InputABCD stream {};
};

response::Value serializeVariables(Variables&& variables);

struct Response
{
	struct control_Control
	{
		struct test_Output
		{
			std::optional<bool> id {};
		};

		std::optional<test_Output> test {};
	};

	control_Control control {};
};

Response parseResponse(response::Value&& response);

} // namespace graphql::client::query::testQuery

#endif // NESTEDINPUTCLIENT_H
