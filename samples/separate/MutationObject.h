// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef MUTATIONOBJECT_H
#define MUTATIONOBJECT_H

#include "TodaySchema.h"

namespace graphql::today::object {

namespace MutationStubs {

template <class TImpl>
concept HasCompleteTask = requires (TImpl impl, service::FieldParams params, CompleteTaskInput inputArg) 
{
	{ impl.applyCompleteTask(std::move(params), std::move(inputArg)) } -> std::convertible_to<service::FieldResult<std::shared_ptr<CompleteTaskPayload>>>;
};

template <class TImpl>
concept HasSetFloat = requires (TImpl impl, service::FieldParams params, response::FloatType valueArg) 
{
	{ impl.applySetFloat(std::move(params), std::move(valueArg)) } -> std::convertible_to<service::FieldResult<response::FloatType>>;
};

} // namespace MutationStubs

class Mutation
	: public service::Object
{
private:
	service::AwaitableResolver resolveCompleteTask(service::ResolverParams&& params);
	service::AwaitableResolver resolveSetFloat(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::shared_ptr<CompleteTaskPayload>> applyCompleteTask(service::FieldParams&& params, CompleteTaskInput&& inputArg) const = 0;
		virtual service::FieldResult<response::FloatType> applySetFloat(service::FieldParams&& params, response::FloatType&& valueArg) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<CompleteTaskPayload>> applyCompleteTask(service::FieldParams&& params, CompleteTaskInput&& inputArg) const final
		{
			if constexpr (MutationStubs::HasCompleteTask<T>)
			{
				return _pimpl->applyCompleteTask(std::move(params), std::move(inputArg));
			}
			else
			{
				throw std::runtime_error(R"ex(Mutation::applyCompleteTask is not implemented)ex");
			}
		}

		service::FieldResult<response::FloatType> applySetFloat(service::FieldParams&& params, response::FloatType&& valueArg) const final
		{
			if constexpr (MutationStubs::HasSetFloat<T>)
			{
				return _pimpl->applySetFloat(std::move(params), std::move(valueArg));
			}
			else
			{
				throw std::runtime_error(R"ex(Mutation::applySetFloat is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Mutation(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Mutation(std::shared_ptr<T> pimpl)
		: Mutation { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

} // namespace graphql::today::object

#endif // MUTATIONOBJECT_H
