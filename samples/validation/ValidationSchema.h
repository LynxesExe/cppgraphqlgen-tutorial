// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef VALIDATIONSCHEMA_H
#define VALIDATIONSCHEMA_H

#include "graphqlservice/internal/Schema.h"

// Check if the library version is compatible with schemagen 4.0.0
static_assert(graphql::internal::MajorVersion == 4, "regenerate with schemagen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 0, "regenerate with schemagen: minor version mismatch");

#include <memory>
#include <string>
#include <vector>

namespace graphql {
namespace validation {

enum class DogCommand
{
	SIT,
	DOWN,
	HEEL
};

enum class CatCommand
{
	JUMP
};

struct ComplexInput
{
	std::optional<response::StringType> name;
	std::optional<response::StringType> owner;
};

namespace object {

class Query;
class Dog;
class Alien;
class Human;
class Cat;
class Mutation;
class MutateDogResult;
class Subscription;
class Message;
class Arguments;

} // namespace object

struct Sentient;
struct Pet;

struct Sentient
{
	virtual service::FieldResult<response::StringType> getName(service::FieldParams&& params) const = 0;
};

struct Pet
{
	virtual service::FieldResult<response::StringType> getName(service::FieldParams&& params) const = 0;
};

namespace object {

namespace QueryStubs {

template <class TImpl>
concept HasDog = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getDog(std::move(params)) } };
};

template <class TImpl>
concept HasHuman = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getHuman(std::move(params)) } };
};

template <class TImpl>
concept HasPet = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getPet(std::move(params)) } };
};

template <class TImpl>
concept HasCatOrDog = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getCatOrDog(std::move(params)) } };
};

template <class TImpl>
concept HasArguments = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Arguments>> { impl.getArguments(std::move(params)) } };
};

template <class TImpl>
concept HasFindDog = requires (TImpl impl, service::FieldParams params, std::optional<ComplexInput> complexArg) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getFindDog(std::move(params), std::move(complexArg)) } };
};

template <class TImpl>
concept HasBooleanList = requires (TImpl impl, service::FieldParams params, std::optional<std::vector<response::BooleanType>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<response::BooleanType>> { impl.getBooleanList(std::move(params), std::move(booleanListArgArg)) } };
};

} // namespace QueryStubs

class Query
	: public service::Object
{
private:
	service::AwaitableResolver resolveDog(service::ResolverParams&& params);
	service::AwaitableResolver resolveHuman(service::ResolverParams&& params);
	service::AwaitableResolver resolvePet(service::ResolverParams&& params);
	service::AwaitableResolver resolveCatOrDog(service::ResolverParams&& params);
	service::AwaitableResolver resolveArguments(service::ResolverParams&& params);
	service::AwaitableResolver resolveFindDog(service::ResolverParams&& params);
	service::AwaitableResolver resolveBooleanList(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);
	service::AwaitableResolver resolve_schema(service::ResolverParams&& params);
	service::AwaitableResolver resolve_type(service::ResolverParams&& params);

	std::shared_ptr<schema::Schema> _schema;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::shared_ptr<Dog>> getDog(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Human>> getHuman(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<service::Object>> getPet(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<service::Object>> getCatOrDog(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Arguments>> getArguments(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Dog>> getFindDog(service::FieldParams&& params, std::optional<ComplexInput>&& complexArg) const = 0;
		virtual service::FieldResult<std::optional<response::BooleanType>> getBooleanList(service::FieldParams&& params, std::optional<std::vector<response::BooleanType>>&& booleanListArgArg) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<Dog>> getDog(service::FieldParams&& params) const final
		{
			if constexpr (QueryStubs::HasDog<T>)
			{
				return { _pimpl->getDog(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getDog is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Human>> getHuman(service::FieldParams&& params) const final
		{
			if constexpr (QueryStubs::HasHuman<T>)
			{
				return { _pimpl->getHuman(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getHuman is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<service::Object>> getPet(service::FieldParams&& params) const final
		{
			if constexpr (QueryStubs::HasPet<T>)
			{
				return { _pimpl->getPet(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getPet is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<service::Object>> getCatOrDog(service::FieldParams&& params) const final
		{
			if constexpr (QueryStubs::HasCatOrDog<T>)
			{
				return { _pimpl->getCatOrDog(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getCatOrDog is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Arguments>> getArguments(service::FieldParams&& params) const final
		{
			if constexpr (QueryStubs::HasArguments<T>)
			{
				return { _pimpl->getArguments(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getArguments is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Dog>> getFindDog(service::FieldParams&& params, std::optional<ComplexInput>&& complexArg) const final
		{
			if constexpr (QueryStubs::HasFindDog<T>)
			{
				return { _pimpl->getFindDog(std::move(params), std::move(complexArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getFindDog is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::BooleanType>> getBooleanList(service::FieldParams&& params, std::optional<std::vector<response::BooleanType>>&& booleanListArgArg) const final
		{
			if constexpr (QueryStubs::HasBooleanList<T>)
			{
				return { _pimpl->getBooleanList(std::move(params), std::move(booleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getBooleanList is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Query(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Query(std::shared_ptr<T> pimpl)
		: Query { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace DogStubs {

template <class TImpl>
concept HasName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::StringType> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept HasNickname = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<response::StringType>> { impl.getNickname(std::move(params)) } };
};

template <class TImpl>
concept HasBarkVolume = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<response::IntType>> { impl.getBarkVolume(std::move(params)) } };
};

template <class TImpl>
concept HasDoesKnowCommand = requires (TImpl impl, service::FieldParams params, DogCommand dogCommandArg) 
{
	{ service::FieldResult<response::BooleanType> { impl.getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) } };
};

template <class TImpl>
concept HasIsHousetrained = requires (TImpl impl, service::FieldParams params, std::optional<response::BooleanType> atOtherHomesArg) 
{
	{ service::FieldResult<response::BooleanType> { impl.getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) } };
};

template <class TImpl>
concept HasOwner = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getOwner(std::move(params)) } };
};

} // namespace DogStubs

class Dog
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolveNickname(service::ResolverParams&& params);
	service::AwaitableResolver resolveBarkVolume(service::ResolverParams&& params);
	service::AwaitableResolver resolveDoesKnowCommand(service::ResolverParams&& params);
	service::AwaitableResolver resolveIsHousetrained(service::ResolverParams&& params);
	service::AwaitableResolver resolveOwner(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Pet
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::optional<response::StringType>> getNickname(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<response::IntType>> getBarkVolume(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<response::BooleanType> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const = 0;
		virtual service::FieldResult<response::BooleanType> getIsHousetrained(service::FieldParams&& params, std::optional<response::BooleanType>&& atOtherHomesArg) const = 0;
		virtual service::FieldResult<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::StringType> getName(service::FieldParams&& params) const final
		{
			if constexpr (DogStubs::HasName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::StringType>> getNickname(service::FieldParams&& params) const final
		{
			if constexpr (DogStubs::HasNickname<T>)
			{
				return { _pimpl->getNickname(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getNickname is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::IntType>> getBarkVolume(service::FieldParams&& params) const final
		{
			if constexpr (DogStubs::HasBarkVolume<T>)
			{
				return { _pimpl->getBarkVolume(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getBarkVolume is not implemented)ex");
			}
		}

		service::FieldResult<response::BooleanType> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const final
		{
			if constexpr (DogStubs::HasDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getDoesKnowCommand is not implemented)ex");
			}
		}

		service::FieldResult<response::BooleanType> getIsHousetrained(service::FieldParams&& params, std::optional<response::BooleanType>&& atOtherHomesArg) const final
		{
			if constexpr (DogStubs::HasIsHousetrained<T>)
			{
				return { _pimpl->getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getIsHousetrained is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const final
		{
			if constexpr (DogStubs::HasOwner<T>)
			{
				return { _pimpl->getOwner(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getOwner is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Dog(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Dog(std::shared_ptr<T> pimpl)
		: Dog { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace AlienStubs {

template <class TImpl>
concept HasName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::StringType> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept HasHomePlanet = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<response::StringType>> { impl.getHomePlanet(std::move(params)) } };
};

} // namespace AlienStubs

class Alien
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolveHomePlanet(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Sentient
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::optional<response::StringType>> getHomePlanet(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::StringType> getName(service::FieldParams&& params) const final
		{
			if constexpr (AlienStubs::HasName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Alien::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::StringType>> getHomePlanet(service::FieldParams&& params) const final
		{
			if constexpr (AlienStubs::HasHomePlanet<T>)
			{
				return { _pimpl->getHomePlanet(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Alien::getHomePlanet is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Alien(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Alien(std::shared_ptr<T> pimpl)
		: Alien { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace HumanStubs {

template <class TImpl>
concept HasName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::StringType> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept HasPets = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<service::Object>>> { impl.getPets(std::move(params)) } };
};

} // namespace HumanStubs

class Human
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolvePets(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Sentient
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::vector<std::shared_ptr<service::Object>>> getPets(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::StringType> getName(service::FieldParams&& params) const final
		{
			if constexpr (HumanStubs::HasName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Human::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::vector<std::shared_ptr<service::Object>>> getPets(service::FieldParams&& params) const final
		{
			if constexpr (HumanStubs::HasPets<T>)
			{
				return { _pimpl->getPets(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Human::getPets is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Human(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Human(std::shared_ptr<T> pimpl)
		: Human { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace CatStubs {

template <class TImpl>
concept HasName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::StringType> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept HasNickname = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<response::StringType>> { impl.getNickname(std::move(params)) } };
};

template <class TImpl>
concept HasDoesKnowCommand = requires (TImpl impl, service::FieldParams params, CatCommand catCommandArg) 
{
	{ service::FieldResult<response::BooleanType> { impl.getDoesKnowCommand(std::move(params), std::move(catCommandArg)) } };
};

template <class TImpl>
concept HasMeowVolume = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<response::IntType>> { impl.getMeowVolume(std::move(params)) } };
};

} // namespace CatStubs

class Cat
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolveNickname(service::ResolverParams&& params);
	service::AwaitableResolver resolveDoesKnowCommand(service::ResolverParams&& params);
	service::AwaitableResolver resolveMeowVolume(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Pet
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::optional<response::StringType>> getNickname(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<response::BooleanType> getDoesKnowCommand(service::FieldParams&& params, CatCommand&& catCommandArg) const = 0;
		virtual service::FieldResult<std::optional<response::IntType>> getMeowVolume(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::StringType> getName(service::FieldParams&& params) const final
		{
			if constexpr (CatStubs::HasName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::StringType>> getNickname(service::FieldParams&& params) const final
		{
			if constexpr (CatStubs::HasNickname<T>)
			{
				return { _pimpl->getNickname(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getNickname is not implemented)ex");
			}
		}

		service::FieldResult<response::BooleanType> getDoesKnowCommand(service::FieldParams&& params, CatCommand&& catCommandArg) const final
		{
			if constexpr (CatStubs::HasDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(params), std::move(catCommandArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getDoesKnowCommand is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::IntType>> getMeowVolume(service::FieldParams&& params) const final
		{
			if constexpr (CatStubs::HasMeowVolume<T>)
			{
				return { _pimpl->getMeowVolume(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getMeowVolume is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Cat(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Cat(std::shared_ptr<T> pimpl)
		: Cat { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace MutationStubs {

template <class TImpl>
concept HasMutateDog = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<MutateDogResult>> { impl.applyMutateDog(std::move(params)) } };
};

} // namespace MutationStubs

class Mutation
	: public service::Object
{
private:
	service::AwaitableResolver resolveMutateDog(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::shared_ptr<MutateDogResult>> applyMutateDog(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<MutateDogResult>> applyMutateDog(service::FieldParams&& params) const final
		{
			if constexpr (MutationStubs::HasMutateDog<T>)
			{
				return { _pimpl->applyMutateDog(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Mutation::applyMutateDog is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Mutation(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Mutation(std::shared_ptr<T> pimpl)
		: Mutation { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace MutateDogResultStubs {

template <class TImpl>
concept HasId = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::IdType> { impl.getId(std::move(params)) } };
};

} // namespace MutateDogResultStubs

class MutateDogResult
	: public service::Object
{
private:
	service::AwaitableResolver resolveId(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<response::IdType> getId(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::IdType> getId(service::FieldParams&& params) const final
		{
			if constexpr (MutateDogResultStubs::HasId<T>)
			{
				return { _pimpl->getId(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(MutateDogResult::getId is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	MutateDogResult(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	MutateDogResult(std::shared_ptr<T> pimpl)
		: MutateDogResult { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace SubscriptionStubs {

template <class TImpl>
concept HasNewMessage = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Message>> { impl.getNewMessage(std::move(params)) } };
};

template <class TImpl>
concept HasDisallowedSecondRootField = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::BooleanType> { impl.getDisallowedSecondRootField(std::move(params)) } };
};

} // namespace SubscriptionStubs

class Subscription
	: public service::Object
{
private:
	service::AwaitableResolver resolveNewMessage(service::ResolverParams&& params);
	service::AwaitableResolver resolveDisallowedSecondRootField(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::shared_ptr<Message>> getNewMessage(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<response::BooleanType> getDisallowedSecondRootField(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<Message>> getNewMessage(service::FieldParams&& params) const final
		{
			if constexpr (SubscriptionStubs::HasNewMessage<T>)
			{
				return { _pimpl->getNewMessage(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Subscription::getNewMessage is not implemented)ex");
			}
		}

		service::FieldResult<response::BooleanType> getDisallowedSecondRootField(service::FieldParams&& params) const final
		{
			if constexpr (SubscriptionStubs::HasDisallowedSecondRootField<T>)
			{
				return { _pimpl->getDisallowedSecondRootField(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Subscription::getDisallowedSecondRootField is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Subscription(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Subscription(std::shared_ptr<T> pimpl)
		: Subscription { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace MessageStubs {

template <class TImpl>
concept HasBody = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<response::StringType>> { impl.getBody(std::move(params)) } };
};

template <class TImpl>
concept HasSender = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::IdType> { impl.getSender(std::move(params)) } };
};

} // namespace MessageStubs

class Message
	: public service::Object
{
private:
	service::AwaitableResolver resolveBody(service::ResolverParams&& params);
	service::AwaitableResolver resolveSender(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::optional<response::StringType>> getBody(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<response::IdType> getSender(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::optional<response::StringType>> getBody(service::FieldParams&& params) const final
		{
			if constexpr (MessageStubs::HasBody<T>)
			{
				return { _pimpl->getBody(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Message::getBody is not implemented)ex");
			}
		}

		service::FieldResult<response::IdType> getSender(service::FieldParams&& params) const final
		{
			if constexpr (MessageStubs::HasSender<T>)
			{
				return { _pimpl->getSender(std::move(params)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Message::getSender is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Message(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Message(std::shared_ptr<T> pimpl)
		: Message { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

namespace ArgumentsStubs {

template <class TImpl>
concept HasMultipleReqs = requires (TImpl impl, service::FieldParams params, response::IntType xArg, response::IntType yArg) 
{
	{ service::FieldResult<response::IntType> { impl.getMultipleReqs(std::move(params), std::move(xArg), std::move(yArg)) } };
};

template <class TImpl>
concept HasBooleanArgField = requires (TImpl impl, service::FieldParams params, std::optional<response::BooleanType> booleanArgArg) 
{
	{ service::FieldResult<std::optional<response::BooleanType>> { impl.getBooleanArgField(std::move(params), std::move(booleanArgArg)) } };
};

template <class TImpl>
concept HasFloatArgField = requires (TImpl impl, service::FieldParams params, std::optional<response::FloatType> floatArgArg) 
{
	{ service::FieldResult<std::optional<response::FloatType>> { impl.getFloatArgField(std::move(params), std::move(floatArgArg)) } };
};

template <class TImpl>
concept HasIntArgField = requires (TImpl impl, service::FieldParams params, std::optional<response::IntType> intArgArg) 
{
	{ service::FieldResult<std::optional<response::IntType>> { impl.getIntArgField(std::move(params), std::move(intArgArg)) } };
};

template <class TImpl>
concept HasNonNullBooleanArgField = requires (TImpl impl, service::FieldParams params, response::BooleanType nonNullBooleanArgArg) 
{
	{ service::FieldResult<response::BooleanType> { impl.getNonNullBooleanArgField(std::move(params), std::move(nonNullBooleanArgArg)) } };
};

template <class TImpl>
concept HasNonNullBooleanListField = requires (TImpl impl, service::FieldParams params, std::optional<std::vector<response::BooleanType>> nonNullBooleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<response::BooleanType>>> { impl.getNonNullBooleanListField(std::move(params), std::move(nonNullBooleanListArgArg)) } };
};

template <class TImpl>
concept HasBooleanListArgField = requires (TImpl impl, service::FieldParams params, std::vector<std::optional<response::BooleanType>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::optional<response::BooleanType>>>> { impl.getBooleanListArgField(std::move(params), std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept HasOptionalNonNullBooleanArgField = requires (TImpl impl, service::FieldParams params, response::BooleanType optionalBooleanArgArg) 
{
	{ service::FieldResult<response::BooleanType> { impl.getOptionalNonNullBooleanArgField(std::move(params), std::move(optionalBooleanArgArg)) } };
};

} // namespace ArgumentsStubs

class Arguments
	: public service::Object
{
private:
	service::AwaitableResolver resolveMultipleReqs(service::ResolverParams&& params);
	service::AwaitableResolver resolveBooleanArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveFloatArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveIntArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveNonNullBooleanArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveNonNullBooleanListField(service::ResolverParams&& params);
	service::AwaitableResolver resolveBooleanListArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveOptionalNonNullBooleanArgField(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<response::IntType> getMultipleReqs(service::FieldParams&& params, response::IntType&& xArg, response::IntType&& yArg) const = 0;
		virtual service::FieldResult<std::optional<response::BooleanType>> getBooleanArgField(service::FieldParams&& params, std::optional<response::BooleanType>&& booleanArgArg) const = 0;
		virtual service::FieldResult<std::optional<response::FloatType>> getFloatArgField(service::FieldParams&& params, std::optional<response::FloatType>&& floatArgArg) const = 0;
		virtual service::FieldResult<std::optional<response::IntType>> getIntArgField(service::FieldParams&& params, std::optional<response::IntType>&& intArgArg) const = 0;
		virtual service::FieldResult<response::BooleanType> getNonNullBooleanArgField(service::FieldParams&& params, response::BooleanType&& nonNullBooleanArgArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<response::BooleanType>>> getNonNullBooleanListField(service::FieldParams&& params, std::optional<std::vector<response::BooleanType>>&& nonNullBooleanListArgArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::optional<response::BooleanType>>>> getBooleanListArgField(service::FieldParams&& params, std::vector<std::optional<response::BooleanType>>&& booleanListArgArg) const = 0;
		virtual service::FieldResult<response::BooleanType> getOptionalNonNullBooleanArgField(service::FieldParams&& params, response::BooleanType&& optionalBooleanArgArg) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::IntType> getMultipleReqs(service::FieldParams&& params, response::IntType&& xArg, response::IntType&& yArg) const final
		{
			if constexpr (ArgumentsStubs::HasMultipleReqs<T>)
			{
				return { _pimpl->getMultipleReqs(std::move(params), std::move(xArg), std::move(yArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getMultipleReqs is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::BooleanType>> getBooleanArgField(service::FieldParams&& params, std::optional<response::BooleanType>&& booleanArgArg) const final
		{
			if constexpr (ArgumentsStubs::HasBooleanArgField<T>)
			{
				return { _pimpl->getBooleanArgField(std::move(params), std::move(booleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getBooleanArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::FloatType>> getFloatArgField(service::FieldParams&& params, std::optional<response::FloatType>&& floatArgArg) const final
		{
			if constexpr (ArgumentsStubs::HasFloatArgField<T>)
			{
				return { _pimpl->getFloatArgField(std::move(params), std::move(floatArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getFloatArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<response::IntType>> getIntArgField(service::FieldParams&& params, std::optional<response::IntType>&& intArgArg) const final
		{
			if constexpr (ArgumentsStubs::HasIntArgField<T>)
			{
				return { _pimpl->getIntArgField(std::move(params), std::move(intArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getIntArgField is not implemented)ex");
			}
		}

		service::FieldResult<response::BooleanType> getNonNullBooleanArgField(service::FieldParams&& params, response::BooleanType&& nonNullBooleanArgArg) const final
		{
			if constexpr (ArgumentsStubs::HasNonNullBooleanArgField<T>)
			{
				return { _pimpl->getNonNullBooleanArgField(std::move(params), std::move(nonNullBooleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getNonNullBooleanArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::vector<response::BooleanType>>> getNonNullBooleanListField(service::FieldParams&& params, std::optional<std::vector<response::BooleanType>>&& nonNullBooleanListArgArg) const final
		{
			if constexpr (ArgumentsStubs::HasNonNullBooleanListField<T>)
			{
				return { _pimpl->getNonNullBooleanListField(std::move(params), std::move(nonNullBooleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getNonNullBooleanListField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::vector<std::optional<response::BooleanType>>>> getBooleanListArgField(service::FieldParams&& params, std::vector<std::optional<response::BooleanType>>&& booleanListArgArg) const final
		{
			if constexpr (ArgumentsStubs::HasBooleanListArgField<T>)
			{
				return { _pimpl->getBooleanListArgField(std::move(params), std::move(booleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getBooleanListArgField is not implemented)ex");
			}
		}

		service::FieldResult<response::BooleanType> getOptionalNonNullBooleanArgField(service::FieldParams&& params, response::BooleanType&& optionalBooleanArgArg) const final
		{
			if constexpr (ArgumentsStubs::HasOptionalNonNullBooleanArgField<T>)
			{
				return { _pimpl->getOptionalNonNullBooleanArgField(std::move(params), std::move(optionalBooleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getOptionalNonNullBooleanArgField is not implemented)ex");
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Arguments(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Arguments(std::shared_ptr<T> pimpl)
		: Arguments { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

} // namespace object

class Operations
	: public service::Request
{
public:
	explicit Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation, std::shared_ptr<object::Subscription> subscription);

	template <class TQuery, class TMutation, class TSubscription>
	explicit Operations(std::shared_ptr<TQuery> query, std::shared_ptr<TMutation> mutation, std::shared_ptr<TSubscription> subscription)
		: Operations { std::make_shared<object::Query>(std::move(query)), std::make_shared<object::Mutation>(std::move(mutation)), std::make_shared<object::Subscription>(std::move(subscription)) }
	{
	}

private:
	std::shared_ptr<object::Query> _query;
	std::shared_ptr<object::Mutation> _mutation;
	std::shared_ptr<object::Subscription> _subscription;
};

std::shared_ptr<schema::Schema> GetSchema();

} // namespace validation
} // namespace graphql

#endif // VALIDATIONSCHEMA_H
