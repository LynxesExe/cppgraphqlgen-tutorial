// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef VALIDATIONSCHEMA_H
#define VALIDATIONSCHEMA_H

#include "graphqlservice/internal/Schema.h"

// Check if the library version is compatible with schemagen 4.0.0
static_assert(graphql::internal::MajorVersion == 4, "regenerate with schemagen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 0, "regenerate with schemagen: minor version mismatch");

#include <memory>
#include <string>
#include <vector>

namespace graphql {
namespace validation {

enum class DogCommand
{
	SIT,
	DOWN,
	HEEL
};

enum class CatCommand
{
	JUMP
};

struct ComplexInput
{
	std::optional<std::string> name;
	std::optional<std::string> owner;
};

namespace object {

class Sentient;
class Pet;

class Query;
class Dog;
class Alien;
class Human;
class Cat;
class Mutation;
class MutateDogResult;
class Subscription;
class Message;
class Arguments;

class Sentient
	: public service::Object
{
private:
	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::TypeNames getTypeNames() const noexcept = 0;
		virtual service::ResolverMap getResolvers() const noexcept = 0;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;		
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::TypeNames getTypeNames() const noexcept final
		{
			return _pimpl->getTypeNames();
		}

		service::ResolverMap getResolvers() const noexcept final
		{
			return _pimpl->getResolvers();
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			_pimpl->beginSelectionSet(params);
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			_pimpl->endSelectionSet(params);
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Sentient(std::unique_ptr<Concept>&& pimpl) noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Sentient(std::shared_ptr<T> pimpl) noexcept
		: Sentient { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
		static_assert(T::template implements<Sentient>(), "Sentient is not implemented");
	}
};

class Pet
	: public service::Object
{
private:
	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::TypeNames getTypeNames() const noexcept = 0;
		virtual service::ResolverMap getResolvers() const noexcept = 0;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;		
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::TypeNames getTypeNames() const noexcept final
		{
			return _pimpl->getTypeNames();
		}

		service::ResolverMap getResolvers() const noexcept final
		{
			return _pimpl->getResolvers();
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			_pimpl->beginSelectionSet(params);
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			_pimpl->endSelectionSet(params);
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Pet(std::unique_ptr<Concept>&& pimpl) noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Pet(std::shared_ptr<T> pimpl) noexcept
		: Pet { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
		static_assert(T::template implements<Pet>(), "Pet is not implemented");
	}
};

namespace implements {

template <class I>
concept DogIs = std::is_same_v<I, Pet>;

template <class I>
concept AlienIs = std::is_same_v<I, Sentient>;

template <class I>
concept HumanIs = std::is_same_v<I, Sentient>;

template <class I>
concept CatIs = std::is_same_v<I, Pet>;

} // namespace implements

namespace methods {
namespace QueryHas {

template <class TImpl>
concept getDogWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getDog(std::move(params)) } };
};

template <class TImpl>
concept getDog = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getDog() } };
};

template <class TImpl>
concept getHumanWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getHuman(std::move(params)) } };
};

template <class TImpl>
concept getHuman = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getHuman() } };
};

template <class TImpl>
concept getPetWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Pet>> { impl.getPet(std::move(params)) } };
};

template <class TImpl>
concept getPet = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Pet>> { impl.getPet() } };
};

template <class TImpl>
concept getCatOrDogWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getCatOrDog(std::move(params)) } };
};

template <class TImpl>
concept getCatOrDog = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getCatOrDog() } };
};

template <class TImpl>
concept getArgumentsWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Arguments>> { impl.getArguments(std::move(params)) } };
};

template <class TImpl>
concept getArguments = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Arguments>> { impl.getArguments() } };
};

template <class TImpl>
concept getFindDogWithParams = requires (TImpl impl, service::FieldParams params, std::optional<ComplexInput> complexArg) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getFindDog(std::move(params), std::move(complexArg)) } };
};

template <class TImpl>
concept getFindDog = requires (TImpl impl, std::optional<ComplexInput> complexArg) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getFindDog(std::move(complexArg)) } };
};

template <class TImpl>
concept getBooleanListWithParams = requires (TImpl impl, service::FieldParams params, std::optional<std::vector<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanList(std::move(params), std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept getBooleanList = requires (TImpl impl, std::optional<std::vector<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanList(std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace QueryHas

namespace DogHas {

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept getNicknameWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname(std::move(params)) } };
};

template <class TImpl>
concept getNickname = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname() } };
};

template <class TImpl>
concept getBarkVolumeWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<int>> { impl.getBarkVolume(std::move(params)) } };
};

template <class TImpl>
concept getBarkVolume = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<int>> { impl.getBarkVolume() } };
};

template <class TImpl>
concept getDoesKnowCommandWithParams = requires (TImpl impl, service::FieldParams params, DogCommand dogCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) } };
};

template <class TImpl>
concept getDoesKnowCommand = requires (TImpl impl, DogCommand dogCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(dogCommandArg)) } };
};

template <class TImpl>
concept getIsHousetrainedWithParams = requires (TImpl impl, service::FieldParams params, std::optional<bool> atOtherHomesArg) 
{
	{ service::FieldResult<bool> { impl.getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) } };
};

template <class TImpl>
concept getIsHousetrained = requires (TImpl impl, std::optional<bool> atOtherHomesArg) 
{
	{ service::FieldResult<bool> { impl.getIsHousetrained(std::move(atOtherHomesArg)) } };
};

template <class TImpl>
concept getOwnerWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getOwner(std::move(params)) } };
};

template <class TImpl>
concept getOwner = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getOwner() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace DogHas

namespace AlienHas {

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept getHomePlanetWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getHomePlanet(std::move(params)) } };
};

template <class TImpl>
concept getHomePlanet = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getHomePlanet() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace AlienHas

namespace HumanHas {

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept getPetsWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<Pet>>> { impl.getPets(std::move(params)) } };
};

template <class TImpl>
concept getPets = requires (TImpl impl) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<Pet>>> { impl.getPets() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace HumanHas

namespace CatHas {

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept getNicknameWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname(std::move(params)) } };
};

template <class TImpl>
concept getNickname = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname() } };
};

template <class TImpl>
concept getDoesKnowCommandWithParams = requires (TImpl impl, service::FieldParams params, CatCommand catCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(params), std::move(catCommandArg)) } };
};

template <class TImpl>
concept getDoesKnowCommand = requires (TImpl impl, CatCommand catCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(catCommandArg)) } };
};

template <class TImpl>
concept getMeowVolumeWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<int>> { impl.getMeowVolume(std::move(params)) } };
};

template <class TImpl>
concept getMeowVolume = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<int>> { impl.getMeowVolume() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace CatHas

namespace MutationHas {

template <class TImpl>
concept applyMutateDogWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<MutateDogResult>> { impl.applyMutateDog(std::move(params)) } };
};

template <class TImpl>
concept applyMutateDog = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<MutateDogResult>> { impl.applyMutateDog() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace MutationHas

namespace MutateDogResultHas {

template <class TImpl>
concept getIdWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::IdType> { impl.getId(std::move(params)) } };
};

template <class TImpl>
concept getId = requires (TImpl impl) 
{
	{ service::FieldResult<response::IdType> { impl.getId() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace MutateDogResultHas

namespace SubscriptionHas {

template <class TImpl>
concept getNewMessageWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Message>> { impl.getNewMessage(std::move(params)) } };
};

template <class TImpl>
concept getNewMessage = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Message>> { impl.getNewMessage() } };
};

template <class TImpl>
concept getDisallowedSecondRootFieldWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<bool> { impl.getDisallowedSecondRootField(std::move(params)) } };
};

template <class TImpl>
concept getDisallowedSecondRootField = requires (TImpl impl) 
{
	{ service::FieldResult<bool> { impl.getDisallowedSecondRootField() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace SubscriptionHas

namespace MessageHas {

template <class TImpl>
concept getBodyWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getBody(std::move(params)) } };
};

template <class TImpl>
concept getBody = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getBody() } };
};

template <class TImpl>
concept getSenderWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::IdType> { impl.getSender(std::move(params)) } };
};

template <class TImpl>
concept getSender = requires (TImpl impl) 
{
	{ service::FieldResult<response::IdType> { impl.getSender() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace MessageHas

namespace ArgumentsHas {

template <class TImpl>
concept getMultipleReqsWithParams = requires (TImpl impl, service::FieldParams params, int xArg, int yArg) 
{
	{ service::FieldResult<int> { impl.getMultipleReqs(std::move(params), std::move(xArg), std::move(yArg)) } };
};

template <class TImpl>
concept getMultipleReqs = requires (TImpl impl, int xArg, int yArg) 
{
	{ service::FieldResult<int> { impl.getMultipleReqs(std::move(xArg), std::move(yArg)) } };
};

template <class TImpl>
concept getBooleanArgFieldWithParams = requires (TImpl impl, service::FieldParams params, std::optional<bool> booleanArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanArgField(std::move(params), std::move(booleanArgArg)) } };
};

template <class TImpl>
concept getBooleanArgField = requires (TImpl impl, std::optional<bool> booleanArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanArgField(std::move(booleanArgArg)) } };
};

template <class TImpl>
concept getFloatArgFieldWithParams = requires (TImpl impl, service::FieldParams params, std::optional<double> floatArgArg) 
{
	{ service::FieldResult<std::optional<double>> { impl.getFloatArgField(std::move(params), std::move(floatArgArg)) } };
};

template <class TImpl>
concept getFloatArgField = requires (TImpl impl, std::optional<double> floatArgArg) 
{
	{ service::FieldResult<std::optional<double>> { impl.getFloatArgField(std::move(floatArgArg)) } };
};

template <class TImpl>
concept getIntArgFieldWithParams = requires (TImpl impl, service::FieldParams params, std::optional<int> intArgArg) 
{
	{ service::FieldResult<std::optional<int>> { impl.getIntArgField(std::move(params), std::move(intArgArg)) } };
};

template <class TImpl>
concept getIntArgField = requires (TImpl impl, std::optional<int> intArgArg) 
{
	{ service::FieldResult<std::optional<int>> { impl.getIntArgField(std::move(intArgArg)) } };
};

template <class TImpl>
concept getNonNullBooleanArgFieldWithParams = requires (TImpl impl, service::FieldParams params, bool nonNullBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getNonNullBooleanArgField(std::move(params), std::move(nonNullBooleanArgArg)) } };
};

template <class TImpl>
concept getNonNullBooleanArgField = requires (TImpl impl, bool nonNullBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getNonNullBooleanArgField(std::move(nonNullBooleanArgArg)) } };
};

template <class TImpl>
concept getNonNullBooleanListFieldWithParams = requires (TImpl impl, service::FieldParams params, std::optional<std::vector<bool>> nonNullBooleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<bool>>> { impl.getNonNullBooleanListField(std::move(params), std::move(nonNullBooleanListArgArg)) } };
};

template <class TImpl>
concept getNonNullBooleanListField = requires (TImpl impl, std::optional<std::vector<bool>> nonNullBooleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<bool>>> { impl.getNonNullBooleanListField(std::move(nonNullBooleanListArgArg)) } };
};

template <class TImpl>
concept getBooleanListArgFieldWithParams = requires (TImpl impl, service::FieldParams params, std::vector<std::optional<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::optional<bool>>>> { impl.getBooleanListArgField(std::move(params), std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept getBooleanListArgField = requires (TImpl impl, std::vector<std::optional<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::optional<bool>>>> { impl.getBooleanListArgField(std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept getOptionalNonNullBooleanArgFieldWithParams = requires (TImpl impl, service::FieldParams params, bool optionalBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getOptionalNonNullBooleanArgField(std::move(params), std::move(optionalBooleanArgArg)) } };
};

template <class TImpl>
concept getOptionalNonNullBooleanArgField = requires (TImpl impl, bool optionalBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getOptionalNonNullBooleanArgField(std::move(optionalBooleanArgArg)) } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace ArgumentsHas
} // namespace methods

class Query
	: public service::Object
{
private:
	service::AwaitableResolver resolveDog(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveHuman(service::ResolverParams&& params) const;
	service::AwaitableResolver resolvePet(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveCatOrDog(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveArguments(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveFindDog(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveBooleanList(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::shared_ptr<Dog>> getDog(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Human>> getHuman(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Pet>> getPet(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<service::Object>> getCatOrDog(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Arguments>> getArguments(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Dog>> getFindDog(service::FieldParams&& params, std::optional<ComplexInput>&& complexArg) const = 0;
		virtual service::FieldResult<std::optional<bool>> getBooleanList(service::FieldParams&& params, std::optional<std::vector<bool>>&& booleanListArgArg) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<Dog>> getDog(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getDogWithParams<T>)
			{
				return { _pimpl->getDog(std::move(params)) };
			}
			else if constexpr (methods::QueryHas::getDog<T>)
			{
				return { _pimpl->getDog() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getDog is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Human>> getHuman(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getHumanWithParams<T>)
			{
				return { _pimpl->getHuman(std::move(params)) };
			}
			else if constexpr (methods::QueryHas::getHuman<T>)
			{
				return { _pimpl->getHuman() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getHuman is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Pet>> getPet(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getPetWithParams<T>)
			{
				return { _pimpl->getPet(std::move(params)) };
			}
			else if constexpr (methods::QueryHas::getPet<T>)
			{
				return { _pimpl->getPet() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getPet is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<service::Object>> getCatOrDog(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getCatOrDogWithParams<T>)
			{
				return { _pimpl->getCatOrDog(std::move(params)) };
			}
			else if constexpr (methods::QueryHas::getCatOrDog<T>)
			{
				return { _pimpl->getCatOrDog() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getCatOrDog is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Arguments>> getArguments(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryHas::getArgumentsWithParams<T>)
			{
				return { _pimpl->getArguments(std::move(params)) };
			}
			else if constexpr (methods::QueryHas::getArguments<T>)
			{
				return { _pimpl->getArguments() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getArguments is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Dog>> getFindDog(service::FieldParams&& params, std::optional<ComplexInput>&& complexArg) const final
		{
			if constexpr (methods::QueryHas::getFindDogWithParams<T>)
			{
				return { _pimpl->getFindDog(std::move(params), std::move(complexArg)) };
			}
			else if constexpr (methods::QueryHas::getFindDog<T>)
			{
				return { _pimpl->getFindDog(std::move(complexArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getFindDog is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<bool>> getBooleanList(service::FieldParams&& params, std::optional<std::vector<bool>>&& booleanListArgArg) const final
		{
			if constexpr (methods::QueryHas::getBooleanListWithParams<T>)
			{
				return { _pimpl->getBooleanList(std::move(params), std::move(booleanListArgArg)) };
			}
			else if constexpr (methods::QueryHas::getBooleanList<T>)
			{
				return { _pimpl->getBooleanList(std::move(booleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getBooleanList is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::QueryHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::QueryHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Query(std::unique_ptr<Concept>&& pimpl) noexcept;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Query(std::shared_ptr<T> pimpl) noexcept
		: Query { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Dog
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveNickname(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveBarkVolume(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveDoesKnowCommand(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveIsHousetrained(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveOwner(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::string> getName(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<int>> getBarkVolume(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const = 0;
		virtual service::FieldResult<bool> getIsHousetrained(service::FieldParams&& params, std::optional<bool>&& atOtherHomesArg) const = 0;
		virtual service::FieldResult<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getNameWithParams<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getNicknameWithParams<T>)
			{
				return { _pimpl->getNickname(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getNickname<T>)
			{
				return { _pimpl->getNickname() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getNickname is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<int>> getBarkVolume(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getBarkVolumeWithParams<T>)
			{
				return { _pimpl->getBarkVolume(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getBarkVolume<T>)
			{
				return { _pimpl->getBarkVolume() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getBarkVolume is not implemented)ex");
			}
		}

		service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const final
		{
			if constexpr (methods::DogHas::getDoesKnowCommandWithParams<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) };
			}
			else if constexpr (methods::DogHas::getDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(dogCommandArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getDoesKnowCommand is not implemented)ex");
			}
		}

		service::FieldResult<bool> getIsHousetrained(service::FieldParams&& params, std::optional<bool>&& atOtherHomesArg) const final
		{
			if constexpr (methods::DogHas::getIsHousetrainedWithParams<T>)
			{
				return { _pimpl->getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) };
			}
			else if constexpr (methods::DogHas::getIsHousetrained<T>)
			{
				return { _pimpl->getIsHousetrained(std::move(atOtherHomesArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getIsHousetrained is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogHas::getOwnerWithParams<T>)
			{
				return { _pimpl->getOwner(std::move(params)) };
			}
			else if constexpr (methods::DogHas::getOwner<T>)
			{
				return { _pimpl->getOwner() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getOwner is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DogHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DogHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Dog(std::unique_ptr<Concept>&& pimpl) noexcept;

	// Interface objects need access to these methods
	friend Pet;

	template <class I>
	static constexpr bool implements() noexcept
	{
		return implements::DogIs<I>;
	}

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Dog(std::shared_ptr<T> pimpl) noexcept
		: Dog { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Alien
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveHomePlanet(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::string> getName(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::string>> getHomePlanet(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::AlienHas::getNameWithParams<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::AlienHas::getName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Alien::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::string>> getHomePlanet(service::FieldParams&& params) const final
		{
			if constexpr (methods::AlienHas::getHomePlanetWithParams<T>)
			{
				return { _pimpl->getHomePlanet(std::move(params)) };
			}
			else if constexpr (methods::AlienHas::getHomePlanet<T>)
			{
				return { _pimpl->getHomePlanet() };
			}
			else
			{
				throw std::runtime_error(R"ex(Alien::getHomePlanet is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::AlienHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::AlienHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Alien(std::unique_ptr<Concept>&& pimpl) noexcept;

	// Interface objects need access to these methods
	friend Sentient;

	template <class I>
	static constexpr bool implements() noexcept
	{
		return implements::AlienIs<I>;
	}

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Alien(std::shared_ptr<T> pimpl) noexcept
		: Alien { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Human
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	service::AwaitableResolver resolvePets(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::string> getName(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::vector<std::shared_ptr<Pet>>> getPets(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::HumanHas::getNameWithParams<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::HumanHas::getName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Human::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::vector<std::shared_ptr<Pet>>> getPets(service::FieldParams&& params) const final
		{
			if constexpr (methods::HumanHas::getPetsWithParams<T>)
			{
				return { _pimpl->getPets(std::move(params)) };
			}
			else if constexpr (methods::HumanHas::getPets<T>)
			{
				return { _pimpl->getPets() };
			}
			else
			{
				throw std::runtime_error(R"ex(Human::getPets is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::HumanHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::HumanHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Human(std::unique_ptr<Concept>&& pimpl) noexcept;

	// Interface objects need access to these methods
	friend Sentient;

	template <class I>
	static constexpr bool implements() noexcept
	{
		return implements::HumanIs<I>;
	}

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Human(std::shared_ptr<T> pimpl) noexcept
		: Human { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Cat
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveNickname(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveDoesKnowCommand(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveMeowVolume(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::string> getName(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, CatCommand&& catCommandArg) const = 0;
		virtual service::FieldResult<std::optional<int>> getMeowVolume(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::CatHas::getNameWithParams<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::CatHas::getName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const final
		{
			if constexpr (methods::CatHas::getNicknameWithParams<T>)
			{
				return { _pimpl->getNickname(std::move(params)) };
			}
			else if constexpr (methods::CatHas::getNickname<T>)
			{
				return { _pimpl->getNickname() };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getNickname is not implemented)ex");
			}
		}

		service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, CatCommand&& catCommandArg) const final
		{
			if constexpr (methods::CatHas::getDoesKnowCommandWithParams<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(params), std::move(catCommandArg)) };
			}
			else if constexpr (methods::CatHas::getDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(catCommandArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getDoesKnowCommand is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<int>> getMeowVolume(service::FieldParams&& params) const final
		{
			if constexpr (methods::CatHas::getMeowVolumeWithParams<T>)
			{
				return { _pimpl->getMeowVolume(std::move(params)) };
			}
			else if constexpr (methods::CatHas::getMeowVolume<T>)
			{
				return { _pimpl->getMeowVolume() };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getMeowVolume is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::CatHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::CatHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Cat(std::unique_ptr<Concept>&& pimpl) noexcept;

	// Interface objects need access to these methods
	friend Pet;

	template <class I>
	static constexpr bool implements() noexcept
	{
		return implements::CatIs<I>;
	}

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Cat(std::shared_ptr<T> pimpl) noexcept
		: Cat { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Mutation
	: public service::Object
{
private:
	service::AwaitableResolver resolveMutateDog(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::shared_ptr<MutateDogResult>> applyMutateDog(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<MutateDogResult>> applyMutateDog(service::FieldParams&& params) const final
		{
			if constexpr (methods::MutationHas::applyMutateDogWithParams<T>)
			{
				return { _pimpl->applyMutateDog(std::move(params)) };
			}
			else if constexpr (methods::MutationHas::applyMutateDog<T>)
			{
				return { _pimpl->applyMutateDog() };
			}
			else
			{
				throw std::runtime_error(R"ex(Mutation::applyMutateDog is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutationHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutationHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Mutation(std::unique_ptr<Concept>&& pimpl) noexcept;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Mutation(std::shared_ptr<T> pimpl) noexcept
		: Mutation { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class MutateDogResult
	: public service::Object
{
private:
	service::AwaitableResolver resolveId(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<response::IdType> getId(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::IdType> getId(service::FieldParams&& params) const final
		{
			if constexpr (methods::MutateDogResultHas::getIdWithParams<T>)
			{
				return { _pimpl->getId(std::move(params)) };
			}
			else if constexpr (methods::MutateDogResultHas::getId<T>)
			{
				return { _pimpl->getId() };
			}
			else
			{
				throw std::runtime_error(R"ex(MutateDogResult::getId is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutateDogResultHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutateDogResultHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	MutateDogResult(std::unique_ptr<Concept>&& pimpl) noexcept;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	MutateDogResult(std::shared_ptr<T> pimpl) noexcept
		: MutateDogResult { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Subscription
	: public service::Object
{
private:
	service::AwaitableResolver resolveNewMessage(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveDisallowedSecondRootField(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::shared_ptr<Message>> getNewMessage(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<bool> getDisallowedSecondRootField(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<Message>> getNewMessage(service::FieldParams&& params) const final
		{
			if constexpr (methods::SubscriptionHas::getNewMessageWithParams<T>)
			{
				return { _pimpl->getNewMessage(std::move(params)) };
			}
			else if constexpr (methods::SubscriptionHas::getNewMessage<T>)
			{
				return { _pimpl->getNewMessage() };
			}
			else
			{
				throw std::runtime_error(R"ex(Subscription::getNewMessage is not implemented)ex");
			}
		}

		service::FieldResult<bool> getDisallowedSecondRootField(service::FieldParams&& params) const final
		{
			if constexpr (methods::SubscriptionHas::getDisallowedSecondRootFieldWithParams<T>)
			{
				return { _pimpl->getDisallowedSecondRootField(std::move(params)) };
			}
			else if constexpr (methods::SubscriptionHas::getDisallowedSecondRootField<T>)
			{
				return { _pimpl->getDisallowedSecondRootField() };
			}
			else
			{
				throw std::runtime_error(R"ex(Subscription::getDisallowedSecondRootField is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::SubscriptionHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::SubscriptionHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Subscription(std::unique_ptr<Concept>&& pimpl) noexcept;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Subscription(std::shared_ptr<T> pimpl) noexcept
		: Subscription { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Message
	: public service::Object
{
private:
	service::AwaitableResolver resolveBody(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveSender(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::optional<std::string>> getBody(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<response::IdType> getSender(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::optional<std::string>> getBody(service::FieldParams&& params) const final
		{
			if constexpr (methods::MessageHas::getBodyWithParams<T>)
			{
				return { _pimpl->getBody(std::move(params)) };
			}
			else if constexpr (methods::MessageHas::getBody<T>)
			{
				return { _pimpl->getBody() };
			}
			else
			{
				throw std::runtime_error(R"ex(Message::getBody is not implemented)ex");
			}
		}

		service::FieldResult<response::IdType> getSender(service::FieldParams&& params) const final
		{
			if constexpr (methods::MessageHas::getSenderWithParams<T>)
			{
				return { _pimpl->getSender(std::move(params)) };
			}
			else if constexpr (methods::MessageHas::getSender<T>)
			{
				return { _pimpl->getSender() };
			}
			else
			{
				throw std::runtime_error(R"ex(Message::getSender is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MessageHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MessageHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Message(std::unique_ptr<Concept>&& pimpl) noexcept;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Message(std::shared_ptr<T> pimpl) noexcept
		: Message { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Arguments
	: public service::Object
{
private:
	service::AwaitableResolver resolveMultipleReqs(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveBooleanArgField(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveFloatArgField(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveIntArgField(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveNonNullBooleanArgField(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveNonNullBooleanListField(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveBooleanListArgField(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveOptionalNonNullBooleanArgField(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<int> getMultipleReqs(service::FieldParams&& params, int&& xArg, int&& yArg) const = 0;
		virtual service::FieldResult<std::optional<bool>> getBooleanArgField(service::FieldParams&& params, std::optional<bool>&& booleanArgArg) const = 0;
		virtual service::FieldResult<std::optional<double>> getFloatArgField(service::FieldParams&& params, std::optional<double>&& floatArgArg) const = 0;
		virtual service::FieldResult<std::optional<int>> getIntArgField(service::FieldParams&& params, std::optional<int>&& intArgArg) const = 0;
		virtual service::FieldResult<bool> getNonNullBooleanArgField(service::FieldParams&& params, bool&& nonNullBooleanArgArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<bool>>> getNonNullBooleanListField(service::FieldParams&& params, std::optional<std::vector<bool>>&& nonNullBooleanListArgArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::optional<bool>>>> getBooleanListArgField(service::FieldParams&& params, std::vector<std::optional<bool>>&& booleanListArgArg) const = 0;
		virtual service::FieldResult<bool> getOptionalNonNullBooleanArgField(service::FieldParams&& params, bool&& optionalBooleanArgArg) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<int> getMultipleReqs(service::FieldParams&& params, int&& xArg, int&& yArg) const final
		{
			if constexpr (methods::ArgumentsHas::getMultipleReqsWithParams<T>)
			{
				return { _pimpl->getMultipleReqs(std::move(params), std::move(xArg), std::move(yArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getMultipleReqs<T>)
			{
				return { _pimpl->getMultipleReqs(std::move(xArg), std::move(yArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getMultipleReqs is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<bool>> getBooleanArgField(service::FieldParams&& params, std::optional<bool>&& booleanArgArg) const final
		{
			if constexpr (methods::ArgumentsHas::getBooleanArgFieldWithParams<T>)
			{
				return { _pimpl->getBooleanArgField(std::move(params), std::move(booleanArgArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getBooleanArgField<T>)
			{
				return { _pimpl->getBooleanArgField(std::move(booleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getBooleanArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<double>> getFloatArgField(service::FieldParams&& params, std::optional<double>&& floatArgArg) const final
		{
			if constexpr (methods::ArgumentsHas::getFloatArgFieldWithParams<T>)
			{
				return { _pimpl->getFloatArgField(std::move(params), std::move(floatArgArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getFloatArgField<T>)
			{
				return { _pimpl->getFloatArgField(std::move(floatArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getFloatArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<int>> getIntArgField(service::FieldParams&& params, std::optional<int>&& intArgArg) const final
		{
			if constexpr (methods::ArgumentsHas::getIntArgFieldWithParams<T>)
			{
				return { _pimpl->getIntArgField(std::move(params), std::move(intArgArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getIntArgField<T>)
			{
				return { _pimpl->getIntArgField(std::move(intArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getIntArgField is not implemented)ex");
			}
		}

		service::FieldResult<bool> getNonNullBooleanArgField(service::FieldParams&& params, bool&& nonNullBooleanArgArg) const final
		{
			if constexpr (methods::ArgumentsHas::getNonNullBooleanArgFieldWithParams<T>)
			{
				return { _pimpl->getNonNullBooleanArgField(std::move(params), std::move(nonNullBooleanArgArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getNonNullBooleanArgField<T>)
			{
				return { _pimpl->getNonNullBooleanArgField(std::move(nonNullBooleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getNonNullBooleanArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::vector<bool>>> getNonNullBooleanListField(service::FieldParams&& params, std::optional<std::vector<bool>>&& nonNullBooleanListArgArg) const final
		{
			if constexpr (methods::ArgumentsHas::getNonNullBooleanListFieldWithParams<T>)
			{
				return { _pimpl->getNonNullBooleanListField(std::move(params), std::move(nonNullBooleanListArgArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getNonNullBooleanListField<T>)
			{
				return { _pimpl->getNonNullBooleanListField(std::move(nonNullBooleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getNonNullBooleanListField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::vector<std::optional<bool>>>> getBooleanListArgField(service::FieldParams&& params, std::vector<std::optional<bool>>&& booleanListArgArg) const final
		{
			if constexpr (methods::ArgumentsHas::getBooleanListArgFieldWithParams<T>)
			{
				return { _pimpl->getBooleanListArgField(std::move(params), std::move(booleanListArgArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getBooleanListArgField<T>)
			{
				return { _pimpl->getBooleanListArgField(std::move(booleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getBooleanListArgField is not implemented)ex");
			}
		}

		service::FieldResult<bool> getOptionalNonNullBooleanArgField(service::FieldParams&& params, bool&& optionalBooleanArgArg) const final
		{
			if constexpr (methods::ArgumentsHas::getOptionalNonNullBooleanArgFieldWithParams<T>)
			{
				return { _pimpl->getOptionalNonNullBooleanArgField(std::move(params), std::move(optionalBooleanArgArg)) };
			}
			else if constexpr (methods::ArgumentsHas::getOptionalNonNullBooleanArgField<T>)
			{
				return { _pimpl->getOptionalNonNullBooleanArgField(std::move(optionalBooleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getOptionalNonNullBooleanArgField is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::ArgumentsHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::ArgumentsHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Arguments(std::unique_ptr<Concept>&& pimpl) noexcept;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Arguments(std::shared_ptr<T> pimpl) noexcept
		: Arguments { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

} // namespace object

class Operations
	: public service::Request
{
public:
	explicit Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation, std::shared_ptr<object::Subscription> subscription);

	template <class TQuery, class TMutation, class TSubscription>
	explicit Operations(std::shared_ptr<TQuery> query, std::shared_ptr<TMutation> mutation, std::shared_ptr<TSubscription> subscription)
		: Operations { std::make_shared<object::Query>(std::move(query)), std::make_shared<object::Mutation>(std::move(mutation)), std::make_shared<object::Subscription>(std::move(subscription)) }
	{
	}

private:
	std::shared_ptr<object::Query> _query;
	std::shared_ptr<object::Mutation> _mutation;
	std::shared_ptr<object::Subscription> _subscription;
};

std::shared_ptr<schema::Schema> GetSchema();

} // namespace validation
} // namespace graphql

#endif // VALIDATIONSCHEMA_H
