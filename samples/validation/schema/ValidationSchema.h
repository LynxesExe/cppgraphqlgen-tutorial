// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef VALIDATIONSCHEMA_H
#define VALIDATIONSCHEMA_H

#include "graphqlservice/internal/Schema.h"

// Check if the library version is compatible with schemagen 4.0.0
static_assert(graphql::internal::MajorVersion == 4, "regenerate with schemagen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 0, "regenerate with schemagen: minor version mismatch");

#include <memory>
#include <string>
#include <vector>

namespace graphql {
namespace validation {

enum class DogCommand
{
	SIT,
	DOWN,
	HEEL
};

enum class CatCommand
{
	JUMP
};

struct ComplexInput
{
	std::optional<std::string> name;
	std::optional<std::string> owner;
};

namespace object {

class Query;
class Dog;
class Alien;
class Human;
class Cat;
class Mutation;
class MutateDogResult;
class Subscription;
class Message;
class Arguments;

} // namespace object

struct Sentient;
struct Pet;

struct Sentient
{
	virtual service::FieldResult<std::string> getName(service::FieldParams&& params) const = 0;
};

struct Pet
{
	virtual service::FieldResult<std::string> getName(service::FieldParams&& params) const = 0;
};

namespace object {
namespace methods {
namespace QueryMethod {

template <class TImpl>
concept WithParamsDog = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getDog(std::move(params)) } };
};

template <class TImpl>
concept NoParamsDog = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getDog() } };
};

template <class TImpl>
concept WithParamsHuman = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getHuman(std::move(params)) } };
};

template <class TImpl>
concept NoParamsHuman = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getHuman() } };
};

template <class TImpl>
concept WithParamsPet = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getPet(std::move(params)) } };
};

template <class TImpl>
concept NoParamsPet = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getPet() } };
};

template <class TImpl>
concept WithParamsCatOrDog = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getCatOrDog(std::move(params)) } };
};

template <class TImpl>
concept NoParamsCatOrDog = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<service::Object>> { impl.getCatOrDog() } };
};

template <class TImpl>
concept WithParamsArguments = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Arguments>> { impl.getArguments(std::move(params)) } };
};

template <class TImpl>
concept NoParamsArguments = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Arguments>> { impl.getArguments() } };
};

template <class TImpl>
concept WithParamsFindDog = requires (TImpl impl, service::FieldParams params, std::optional<ComplexInput> complexArg) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getFindDog(std::move(params), std::move(complexArg)) } };
};

template <class TImpl>
concept NoParamsFindDog = requires (TImpl impl, std::optional<ComplexInput> complexArg) 
{
	{ service::FieldResult<std::shared_ptr<Dog>> { impl.getFindDog(std::move(complexArg)) } };
};

template <class TImpl>
concept WithParamsBooleanList = requires (TImpl impl, service::FieldParams params, std::optional<std::vector<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanList(std::move(params), std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept NoParamsBooleanList = requires (TImpl impl, std::optional<std::vector<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanList(std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace QueryMethod

namespace DogMethod {

template <class TImpl>
concept WithParamsName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept NoParamsName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept WithParamsNickname = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname(std::move(params)) } };
};

template <class TImpl>
concept NoParamsNickname = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname() } };
};

template <class TImpl>
concept WithParamsBarkVolume = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<int>> { impl.getBarkVolume(std::move(params)) } };
};

template <class TImpl>
concept NoParamsBarkVolume = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<int>> { impl.getBarkVolume() } };
};

template <class TImpl>
concept WithParamsDoesKnowCommand = requires (TImpl impl, service::FieldParams params, DogCommand dogCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) } };
};

template <class TImpl>
concept NoParamsDoesKnowCommand = requires (TImpl impl, DogCommand dogCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(dogCommandArg)) } };
};

template <class TImpl>
concept WithParamsIsHousetrained = requires (TImpl impl, service::FieldParams params, std::optional<bool> atOtherHomesArg) 
{
	{ service::FieldResult<bool> { impl.getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) } };
};

template <class TImpl>
concept NoParamsIsHousetrained = requires (TImpl impl, std::optional<bool> atOtherHomesArg) 
{
	{ service::FieldResult<bool> { impl.getIsHousetrained(std::move(atOtherHomesArg)) } };
};

template <class TImpl>
concept WithParamsOwner = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getOwner(std::move(params)) } };
};

template <class TImpl>
concept NoParamsOwner = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Human>> { impl.getOwner() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace DogMethod

namespace AlienMethod {

template <class TImpl>
concept WithParamsName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept NoParamsName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept WithParamsHomePlanet = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getHomePlanet(std::move(params)) } };
};

template <class TImpl>
concept NoParamsHomePlanet = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getHomePlanet() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace AlienMethod

namespace HumanMethod {

template <class TImpl>
concept WithParamsName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept NoParamsName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept WithParamsPets = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<service::Object>>> { impl.getPets(std::move(params)) } };
};

template <class TImpl>
concept NoParamsPets = requires (TImpl impl) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<service::Object>>> { impl.getPets() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace HumanMethod

namespace CatMethod {

template <class TImpl>
concept WithParamsName = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept NoParamsName = requires (TImpl impl) 
{
	{ service::FieldResult<std::string> { impl.getName() } };
};

template <class TImpl>
concept WithParamsNickname = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname(std::move(params)) } };
};

template <class TImpl>
concept NoParamsNickname = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getNickname() } };
};

template <class TImpl>
concept WithParamsDoesKnowCommand = requires (TImpl impl, service::FieldParams params, CatCommand catCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(params), std::move(catCommandArg)) } };
};

template <class TImpl>
concept NoParamsDoesKnowCommand = requires (TImpl impl, CatCommand catCommandArg) 
{
	{ service::FieldResult<bool> { impl.getDoesKnowCommand(std::move(catCommandArg)) } };
};

template <class TImpl>
concept WithParamsMeowVolume = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<int>> { impl.getMeowVolume(std::move(params)) } };
};

template <class TImpl>
concept NoParamsMeowVolume = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<int>> { impl.getMeowVolume() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace CatMethod

namespace MutationMethod {

template <class TImpl>
concept WithParamsMutateDog = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<MutateDogResult>> { impl.applyMutateDog(std::move(params)) } };
};

template <class TImpl>
concept NoParamsMutateDog = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<MutateDogResult>> { impl.applyMutateDog() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace MutationMethod

namespace MutateDogResultMethod {

template <class TImpl>
concept WithParamsId = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::IdType> { impl.getId(std::move(params)) } };
};

template <class TImpl>
concept NoParamsId = requires (TImpl impl) 
{
	{ service::FieldResult<response::IdType> { impl.getId() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace MutateDogResultMethod

namespace SubscriptionMethod {

template <class TImpl>
concept WithParamsNewMessage = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Message>> { impl.getNewMessage(std::move(params)) } };
};

template <class TImpl>
concept NoParamsNewMessage = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Message>> { impl.getNewMessage() } };
};

template <class TImpl>
concept WithParamsDisallowedSecondRootField = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<bool> { impl.getDisallowedSecondRootField(std::move(params)) } };
};

template <class TImpl>
concept NoParamsDisallowedSecondRootField = requires (TImpl impl) 
{
	{ service::FieldResult<bool> { impl.getDisallowedSecondRootField() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace SubscriptionMethod

namespace MessageMethod {

template <class TImpl>
concept WithParamsBody = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getBody(std::move(params)) } };
};

template <class TImpl>
concept NoParamsBody = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getBody() } };
};

template <class TImpl>
concept WithParamsSender = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<response::IdType> { impl.getSender(std::move(params)) } };
};

template <class TImpl>
concept NoParamsSender = requires (TImpl impl) 
{
	{ service::FieldResult<response::IdType> { impl.getSender() } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace MessageMethod

namespace ArgumentsMethod {

template <class TImpl>
concept WithParamsMultipleReqs = requires (TImpl impl, service::FieldParams params, int xArg, int yArg) 
{
	{ service::FieldResult<int> { impl.getMultipleReqs(std::move(params), std::move(xArg), std::move(yArg)) } };
};

template <class TImpl>
concept NoParamsMultipleReqs = requires (TImpl impl, int xArg, int yArg) 
{
	{ service::FieldResult<int> { impl.getMultipleReqs(std::move(xArg), std::move(yArg)) } };
};

template <class TImpl>
concept WithParamsBooleanArgField = requires (TImpl impl, service::FieldParams params, std::optional<bool> booleanArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanArgField(std::move(params), std::move(booleanArgArg)) } };
};

template <class TImpl>
concept NoParamsBooleanArgField = requires (TImpl impl, std::optional<bool> booleanArgArg) 
{
	{ service::FieldResult<std::optional<bool>> { impl.getBooleanArgField(std::move(booleanArgArg)) } };
};

template <class TImpl>
concept WithParamsFloatArgField = requires (TImpl impl, service::FieldParams params, std::optional<double> floatArgArg) 
{
	{ service::FieldResult<std::optional<double>> { impl.getFloatArgField(std::move(params), std::move(floatArgArg)) } };
};

template <class TImpl>
concept NoParamsFloatArgField = requires (TImpl impl, std::optional<double> floatArgArg) 
{
	{ service::FieldResult<std::optional<double>> { impl.getFloatArgField(std::move(floatArgArg)) } };
};

template <class TImpl>
concept WithParamsIntArgField = requires (TImpl impl, service::FieldParams params, std::optional<int> intArgArg) 
{
	{ service::FieldResult<std::optional<int>> { impl.getIntArgField(std::move(params), std::move(intArgArg)) } };
};

template <class TImpl>
concept NoParamsIntArgField = requires (TImpl impl, std::optional<int> intArgArg) 
{
	{ service::FieldResult<std::optional<int>> { impl.getIntArgField(std::move(intArgArg)) } };
};

template <class TImpl>
concept WithParamsNonNullBooleanArgField = requires (TImpl impl, service::FieldParams params, bool nonNullBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getNonNullBooleanArgField(std::move(params), std::move(nonNullBooleanArgArg)) } };
};

template <class TImpl>
concept NoParamsNonNullBooleanArgField = requires (TImpl impl, bool nonNullBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getNonNullBooleanArgField(std::move(nonNullBooleanArgArg)) } };
};

template <class TImpl>
concept WithParamsNonNullBooleanListField = requires (TImpl impl, service::FieldParams params, std::optional<std::vector<bool>> nonNullBooleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<bool>>> { impl.getNonNullBooleanListField(std::move(params), std::move(nonNullBooleanListArgArg)) } };
};

template <class TImpl>
concept NoParamsNonNullBooleanListField = requires (TImpl impl, std::optional<std::vector<bool>> nonNullBooleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<bool>>> { impl.getNonNullBooleanListField(std::move(nonNullBooleanListArgArg)) } };
};

template <class TImpl>
concept WithParamsBooleanListArgField = requires (TImpl impl, service::FieldParams params, std::vector<std::optional<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::optional<bool>>>> { impl.getBooleanListArgField(std::move(params), std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept NoParamsBooleanListArgField = requires (TImpl impl, std::vector<std::optional<bool>> booleanListArgArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::optional<bool>>>> { impl.getBooleanListArgField(std::move(booleanListArgArg)) } };
};

template <class TImpl>
concept WithParamsOptionalNonNullBooleanArgField = requires (TImpl impl, service::FieldParams params, bool optionalBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getOptionalNonNullBooleanArgField(std::move(params), std::move(optionalBooleanArgArg)) } };
};

template <class TImpl>
concept NoParamsOptionalNonNullBooleanArgField = requires (TImpl impl, bool optionalBooleanArgArg) 
{
	{ service::FieldResult<bool> { impl.getOptionalNonNullBooleanArgField(std::move(optionalBooleanArgArg)) } };
};

template <class TImpl>
concept HasBeginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept HasEndSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace ArgumentsMethod
} // namespace methods

class Query
	: public service::Object
{
private:
	service::AwaitableResolver resolveDog(service::ResolverParams&& params);
	service::AwaitableResolver resolveHuman(service::ResolverParams&& params);
	service::AwaitableResolver resolvePet(service::ResolverParams&& params);
	service::AwaitableResolver resolveCatOrDog(service::ResolverParams&& params);
	service::AwaitableResolver resolveArguments(service::ResolverParams&& params);
	service::AwaitableResolver resolveFindDog(service::ResolverParams&& params);
	service::AwaitableResolver resolveBooleanList(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);
	service::AwaitableResolver resolve_schema(service::ResolverParams&& params);
	service::AwaitableResolver resolve_type(service::ResolverParams&& params);

	std::shared_ptr<schema::Schema> _schema;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::shared_ptr<Dog>> getDog(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Human>> getHuman(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<service::Object>> getPet(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<service::Object>> getCatOrDog(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Arguments>> getArguments(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Dog>> getFindDog(service::FieldParams&& params, std::optional<ComplexInput>&& complexArg) const = 0;
		virtual service::FieldResult<std::optional<bool>> getBooleanList(service::FieldParams&& params, std::optional<std::vector<bool>>&& booleanListArgArg) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<Dog>> getDog(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryMethod::WithParamsDog<T>)
			{
				return { _pimpl->getDog(std::move(params)) };
			}
			else if constexpr (methods::QueryMethod::NoParamsDog<T>)
			{
				return { _pimpl->getDog() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getDog is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Human>> getHuman(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryMethod::WithParamsHuman<T>)
			{
				return { _pimpl->getHuman(std::move(params)) };
			}
			else if constexpr (methods::QueryMethod::NoParamsHuman<T>)
			{
				return { _pimpl->getHuman() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getHuman is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<service::Object>> getPet(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryMethod::WithParamsPet<T>)
			{
				return { _pimpl->getPet(std::move(params)) };
			}
			else if constexpr (methods::QueryMethod::NoParamsPet<T>)
			{
				return { _pimpl->getPet() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getPet is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<service::Object>> getCatOrDog(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryMethod::WithParamsCatOrDog<T>)
			{
				return { _pimpl->getCatOrDog(std::move(params)) };
			}
			else if constexpr (methods::QueryMethod::NoParamsCatOrDog<T>)
			{
				return { _pimpl->getCatOrDog() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getCatOrDog is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Arguments>> getArguments(service::FieldParams&& params) const final
		{
			if constexpr (methods::QueryMethod::WithParamsArguments<T>)
			{
				return { _pimpl->getArguments(std::move(params)) };
			}
			else if constexpr (methods::QueryMethod::NoParamsArguments<T>)
			{
				return { _pimpl->getArguments() };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getArguments is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Dog>> getFindDog(service::FieldParams&& params, std::optional<ComplexInput>&& complexArg) const final
		{
			if constexpr (methods::QueryMethod::WithParamsFindDog<T>)
			{
				return { _pimpl->getFindDog(std::move(params), std::move(complexArg)) };
			}
			else if constexpr (methods::QueryMethod::NoParamsFindDog<T>)
			{
				return { _pimpl->getFindDog(std::move(complexArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getFindDog is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<bool>> getBooleanList(service::FieldParams&& params, std::optional<std::vector<bool>>&& booleanListArgArg) const final
		{
			if constexpr (methods::QueryMethod::WithParamsBooleanList<T>)
			{
				return { _pimpl->getBooleanList(std::move(params), std::move(booleanListArgArg)) };
			}
			else if constexpr (methods::QueryMethod::NoParamsBooleanList<T>)
			{
				return { _pimpl->getBooleanList(std::move(booleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Query::getBooleanList is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::QueryMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::QueryMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Query(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Query(std::shared_ptr<T> pimpl)
		: Query { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Dog
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolveNickname(service::ResolverParams&& params);
	service::AwaitableResolver resolveBarkVolume(service::ResolverParams&& params);
	service::AwaitableResolver resolveDoesKnowCommand(service::ResolverParams&& params);
	service::AwaitableResolver resolveIsHousetrained(service::ResolverParams&& params);
	service::AwaitableResolver resolveOwner(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Pet
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<int>> getBarkVolume(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const = 0;
		virtual service::FieldResult<bool> getIsHousetrained(service::FieldParams&& params, std::optional<bool>&& atOtherHomesArg) const = 0;
		virtual service::FieldResult<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogMethod::WithParamsName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::DogMethod::NoParamsName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogMethod::WithParamsNickname<T>)
			{
				return { _pimpl->getNickname(std::move(params)) };
			}
			else if constexpr (methods::DogMethod::NoParamsNickname<T>)
			{
				return { _pimpl->getNickname() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getNickname is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<int>> getBarkVolume(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogMethod::WithParamsBarkVolume<T>)
			{
				return { _pimpl->getBarkVolume(std::move(params)) };
			}
			else if constexpr (methods::DogMethod::NoParamsBarkVolume<T>)
			{
				return { _pimpl->getBarkVolume() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getBarkVolume is not implemented)ex");
			}
		}

		service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, DogCommand&& dogCommandArg) const final
		{
			if constexpr (methods::DogMethod::WithParamsDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(params), std::move(dogCommandArg)) };
			}
			else if constexpr (methods::DogMethod::NoParamsDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(dogCommandArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getDoesKnowCommand is not implemented)ex");
			}
		}

		service::FieldResult<bool> getIsHousetrained(service::FieldParams&& params, std::optional<bool>&& atOtherHomesArg) const final
		{
			if constexpr (methods::DogMethod::WithParamsIsHousetrained<T>)
			{
				return { _pimpl->getIsHousetrained(std::move(params), std::move(atOtherHomesArg)) };
			}
			else if constexpr (methods::DogMethod::NoParamsIsHousetrained<T>)
			{
				return { _pimpl->getIsHousetrained(std::move(atOtherHomesArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getIsHousetrained is not implemented)ex");
			}
		}

		service::FieldResult<std::shared_ptr<Human>> getOwner(service::FieldParams&& params) const final
		{
			if constexpr (methods::DogMethod::WithParamsOwner<T>)
			{
				return { _pimpl->getOwner(std::move(params)) };
			}
			else if constexpr (methods::DogMethod::NoParamsOwner<T>)
			{
				return { _pimpl->getOwner() };
			}
			else
			{
				throw std::runtime_error(R"ex(Dog::getOwner is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DogMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::DogMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Dog(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Dog(std::shared_ptr<T> pimpl)
		: Dog { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Alien
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolveHomePlanet(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Sentient
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::optional<std::string>> getHomePlanet(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::AlienMethod::WithParamsName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::AlienMethod::NoParamsName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Alien::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::string>> getHomePlanet(service::FieldParams&& params) const final
		{
			if constexpr (methods::AlienMethod::WithParamsHomePlanet<T>)
			{
				return { _pimpl->getHomePlanet(std::move(params)) };
			}
			else if constexpr (methods::AlienMethod::NoParamsHomePlanet<T>)
			{
				return { _pimpl->getHomePlanet() };
			}
			else
			{
				throw std::runtime_error(R"ex(Alien::getHomePlanet is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::AlienMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::AlienMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Alien(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Alien(std::shared_ptr<T> pimpl)
		: Alien { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Human
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolvePets(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Sentient
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::vector<std::shared_ptr<service::Object>>> getPets(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::HumanMethod::WithParamsName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::HumanMethod::NoParamsName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Human::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::vector<std::shared_ptr<service::Object>>> getPets(service::FieldParams&& params) const final
		{
			if constexpr (methods::HumanMethod::WithParamsPets<T>)
			{
				return { _pimpl->getPets(std::move(params)) };
			}
			else if constexpr (methods::HumanMethod::NoParamsPets<T>)
			{
				return { _pimpl->getPets() };
			}
			else
			{
				throw std::runtime_error(R"ex(Human::getPets is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::HumanMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::HumanMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Human(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Human(std::shared_ptr<T> pimpl)
		: Human { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Cat
	: public service::Object
{
private:
	service::AwaitableResolver resolveName(service::ResolverParams&& params);
	service::AwaitableResolver resolveNickname(service::ResolverParams&& params);
	service::AwaitableResolver resolveDoesKnowCommand(service::ResolverParams&& params);
	service::AwaitableResolver resolveMeowVolume(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Pet
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, CatCommand&& catCommandArg) const = 0;
		virtual service::FieldResult<std::optional<int>> getMeowVolume(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::string> getName(service::FieldParams&& params) const final
		{
			if constexpr (methods::CatMethod::WithParamsName<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else if constexpr (methods::CatMethod::NoParamsName<T>)
			{
				return { _pimpl->getName() };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getName is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::string>> getNickname(service::FieldParams&& params) const final
		{
			if constexpr (methods::CatMethod::WithParamsNickname<T>)
			{
				return { _pimpl->getNickname(std::move(params)) };
			}
			else if constexpr (methods::CatMethod::NoParamsNickname<T>)
			{
				return { _pimpl->getNickname() };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getNickname is not implemented)ex");
			}
		}

		service::FieldResult<bool> getDoesKnowCommand(service::FieldParams&& params, CatCommand&& catCommandArg) const final
		{
			if constexpr (methods::CatMethod::WithParamsDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(params), std::move(catCommandArg)) };
			}
			else if constexpr (methods::CatMethod::NoParamsDoesKnowCommand<T>)
			{
				return { _pimpl->getDoesKnowCommand(std::move(catCommandArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getDoesKnowCommand is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<int>> getMeowVolume(service::FieldParams&& params) const final
		{
			if constexpr (methods::CatMethod::WithParamsMeowVolume<T>)
			{
				return { _pimpl->getMeowVolume(std::move(params)) };
			}
			else if constexpr (methods::CatMethod::NoParamsMeowVolume<T>)
			{
				return { _pimpl->getMeowVolume() };
			}
			else
			{
				throw std::runtime_error(R"ex(Cat::getMeowVolume is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::CatMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::CatMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Cat(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Cat(std::shared_ptr<T> pimpl)
		: Cat { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Mutation
	: public service::Object
{
private:
	service::AwaitableResolver resolveMutateDog(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::shared_ptr<MutateDogResult>> applyMutateDog(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<MutateDogResult>> applyMutateDog(service::FieldParams&& params) const final
		{
			if constexpr (methods::MutationMethod::WithParamsMutateDog<T>)
			{
				return { _pimpl->applyMutateDog(std::move(params)) };
			}
			else if constexpr (methods::MutationMethod::NoParamsMutateDog<T>)
			{
				return { _pimpl->applyMutateDog() };
			}
			else
			{
				throw std::runtime_error(R"ex(Mutation::applyMutateDog is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutationMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutationMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Mutation(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Mutation(std::shared_ptr<T> pimpl)
		: Mutation { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class MutateDogResult
	: public service::Object
{
private:
	service::AwaitableResolver resolveId(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<response::IdType> getId(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::IdType> getId(service::FieldParams&& params) const final
		{
			if constexpr (methods::MutateDogResultMethod::WithParamsId<T>)
			{
				return { _pimpl->getId(std::move(params)) };
			}
			else if constexpr (methods::MutateDogResultMethod::NoParamsId<T>)
			{
				return { _pimpl->getId() };
			}
			else
			{
				throw std::runtime_error(R"ex(MutateDogResult::getId is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutateDogResultMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MutateDogResultMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	MutateDogResult(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	MutateDogResult(std::shared_ptr<T> pimpl)
		: MutateDogResult { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Subscription
	: public service::Object
{
private:
	service::AwaitableResolver resolveNewMessage(service::ResolverParams&& params);
	service::AwaitableResolver resolveDisallowedSecondRootField(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::shared_ptr<Message>> getNewMessage(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<bool> getDisallowedSecondRootField(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::shared_ptr<Message>> getNewMessage(service::FieldParams&& params) const final
		{
			if constexpr (methods::SubscriptionMethod::WithParamsNewMessage<T>)
			{
				return { _pimpl->getNewMessage(std::move(params)) };
			}
			else if constexpr (methods::SubscriptionMethod::NoParamsNewMessage<T>)
			{
				return { _pimpl->getNewMessage() };
			}
			else
			{
				throw std::runtime_error(R"ex(Subscription::getNewMessage is not implemented)ex");
			}
		}

		service::FieldResult<bool> getDisallowedSecondRootField(service::FieldParams&& params) const final
		{
			if constexpr (methods::SubscriptionMethod::WithParamsDisallowedSecondRootField<T>)
			{
				return { _pimpl->getDisallowedSecondRootField(std::move(params)) };
			}
			else if constexpr (methods::SubscriptionMethod::NoParamsDisallowedSecondRootField<T>)
			{
				return { _pimpl->getDisallowedSecondRootField() };
			}
			else
			{
				throw std::runtime_error(R"ex(Subscription::getDisallowedSecondRootField is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::SubscriptionMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::SubscriptionMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Subscription(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Subscription(std::shared_ptr<T> pimpl)
		: Subscription { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Message
	: public service::Object
{
private:
	service::AwaitableResolver resolveBody(service::ResolverParams&& params);
	service::AwaitableResolver resolveSender(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<std::optional<std::string>> getBody(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<response::IdType> getSender(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::optional<std::string>> getBody(service::FieldParams&& params) const final
		{
			if constexpr (methods::MessageMethod::WithParamsBody<T>)
			{
				return { _pimpl->getBody(std::move(params)) };
			}
			else if constexpr (methods::MessageMethod::NoParamsBody<T>)
			{
				return { _pimpl->getBody() };
			}
			else
			{
				throw std::runtime_error(R"ex(Message::getBody is not implemented)ex");
			}
		}

		service::FieldResult<response::IdType> getSender(service::FieldParams&& params) const final
		{
			if constexpr (methods::MessageMethod::WithParamsSender<T>)
			{
				return { _pimpl->getSender(std::move(params)) };
			}
			else if constexpr (methods::MessageMethod::NoParamsSender<T>)
			{
				return { _pimpl->getSender() };
			}
			else
			{
				throw std::runtime_error(R"ex(Message::getSender is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MessageMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::MessageMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Message(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Message(std::shared_ptr<T> pimpl)
		: Message { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

class Arguments
	: public service::Object
{
private:
	service::AwaitableResolver resolveMultipleReqs(service::ResolverParams&& params);
	service::AwaitableResolver resolveBooleanArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveFloatArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveIntArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveNonNullBooleanArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveNonNullBooleanListField(service::ResolverParams&& params);
	service::AwaitableResolver resolveBooleanListArgField(service::ResolverParams&& params);
	service::AwaitableResolver resolveOptionalNonNullBooleanArgField(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		virtual service::FieldResult<int> getMultipleReqs(service::FieldParams&& params, int&& xArg, int&& yArg) const = 0;
		virtual service::FieldResult<std::optional<bool>> getBooleanArgField(service::FieldParams&& params, std::optional<bool>&& booleanArgArg) const = 0;
		virtual service::FieldResult<std::optional<double>> getFloatArgField(service::FieldParams&& params, std::optional<double>&& floatArgArg) const = 0;
		virtual service::FieldResult<std::optional<int>> getIntArgField(service::FieldParams&& params, std::optional<int>&& intArgArg) const = 0;
		virtual service::FieldResult<bool> getNonNullBooleanArgField(service::FieldParams&& params, bool&& nonNullBooleanArgArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<bool>>> getNonNullBooleanListField(service::FieldParams&& params, std::optional<std::vector<bool>>&& nonNullBooleanListArgArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::optional<bool>>>> getBooleanListArgField(service::FieldParams&& params, std::vector<std::optional<bool>>&& booleanListArgArg) const = 0;
		virtual service::FieldResult<bool> getOptionalNonNullBooleanArgField(service::FieldParams&& params, bool&& optionalBooleanArgArg) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<int> getMultipleReqs(service::FieldParams&& params, int&& xArg, int&& yArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsMultipleReqs<T>)
			{
				return { _pimpl->getMultipleReqs(std::move(params), std::move(xArg), std::move(yArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsMultipleReqs<T>)
			{
				return { _pimpl->getMultipleReqs(std::move(xArg), std::move(yArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getMultipleReqs is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<bool>> getBooleanArgField(service::FieldParams&& params, std::optional<bool>&& booleanArgArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsBooleanArgField<T>)
			{
				return { _pimpl->getBooleanArgField(std::move(params), std::move(booleanArgArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsBooleanArgField<T>)
			{
				return { _pimpl->getBooleanArgField(std::move(booleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getBooleanArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<double>> getFloatArgField(service::FieldParams&& params, std::optional<double>&& floatArgArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsFloatArgField<T>)
			{
				return { _pimpl->getFloatArgField(std::move(params), std::move(floatArgArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsFloatArgField<T>)
			{
				return { _pimpl->getFloatArgField(std::move(floatArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getFloatArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<int>> getIntArgField(service::FieldParams&& params, std::optional<int>&& intArgArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsIntArgField<T>)
			{
				return { _pimpl->getIntArgField(std::move(params), std::move(intArgArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsIntArgField<T>)
			{
				return { _pimpl->getIntArgField(std::move(intArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getIntArgField is not implemented)ex");
			}
		}

		service::FieldResult<bool> getNonNullBooleanArgField(service::FieldParams&& params, bool&& nonNullBooleanArgArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsNonNullBooleanArgField<T>)
			{
				return { _pimpl->getNonNullBooleanArgField(std::move(params), std::move(nonNullBooleanArgArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsNonNullBooleanArgField<T>)
			{
				return { _pimpl->getNonNullBooleanArgField(std::move(nonNullBooleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getNonNullBooleanArgField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::vector<bool>>> getNonNullBooleanListField(service::FieldParams&& params, std::optional<std::vector<bool>>&& nonNullBooleanListArgArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsNonNullBooleanListField<T>)
			{
				return { _pimpl->getNonNullBooleanListField(std::move(params), std::move(nonNullBooleanListArgArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsNonNullBooleanListField<T>)
			{
				return { _pimpl->getNonNullBooleanListField(std::move(nonNullBooleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getNonNullBooleanListField is not implemented)ex");
			}
		}

		service::FieldResult<std::optional<std::vector<std::optional<bool>>>> getBooleanListArgField(service::FieldParams&& params, std::vector<std::optional<bool>>&& booleanListArgArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsBooleanListArgField<T>)
			{
				return { _pimpl->getBooleanListArgField(std::move(params), std::move(booleanListArgArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsBooleanListArgField<T>)
			{
				return { _pimpl->getBooleanListArgField(std::move(booleanListArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getBooleanListArgField is not implemented)ex");
			}
		}

		service::FieldResult<bool> getOptionalNonNullBooleanArgField(service::FieldParams&& params, bool&& optionalBooleanArgArg) const final
		{
			if constexpr (methods::ArgumentsMethod::WithParamsOptionalNonNullBooleanArgField<T>)
			{
				return { _pimpl->getOptionalNonNullBooleanArgField(std::move(params), std::move(optionalBooleanArgArg)) };
			}
			else if constexpr (methods::ArgumentsMethod::NoParamsOptionalNonNullBooleanArgField<T>)
			{
				return { _pimpl->getOptionalNonNullBooleanArgField(std::move(optionalBooleanArgArg)) };
			}
			else
			{
				throw std::runtime_error(R"ex(Arguments::getOptionalNonNullBooleanArgField is not implemented)ex");
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::ArgumentsMethod::HasBeginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::ArgumentsMethod::HasEndSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Arguments(std::unique_ptr<Concept>&& pimpl);

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Arguments(std::shared_ptr<T> pimpl)
		: Arguments { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}
};

} // namespace object

class Operations
	: public service::Request
{
public:
	explicit Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation, std::shared_ptr<object::Subscription> subscription);

	template <class TQuery, class TMutation, class TSubscription>
	explicit Operations(std::shared_ptr<TQuery> query, std::shared_ptr<TMutation> mutation, std::shared_ptr<TSubscription> subscription)
		: Operations { std::make_shared<object::Query>(std::move(query)), std::make_shared<object::Mutation>(std::move(mutation)), std::make_shared<object::Subscription>(std::move(subscription)) }
	{
	}

private:
	std::shared_ptr<object::Query> _query;
	std::shared_ptr<object::Mutation> _mutation;
	std::shared_ptr<object::Subscription> _subscription;
};

std::shared_ptr<schema::Schema> GetSchema();

} // namespace validation
} // namespace graphql

#endif // VALIDATIONSCHEMA_H
