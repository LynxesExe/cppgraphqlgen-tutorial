// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef PROXYCLIENT_H
#define PROXYCLIENT_H

#include "graphqlservice/GraphQLClient.h"
#include "graphqlservice/GraphQLParse.h"
#include "graphqlservice/GraphQLResponse.h"

#include "graphqlservice/internal/Version.h"

// Check if the library version is compatible with clientgen 4.5.0
static_assert(graphql::internal::MajorVersion == 4, "regenerate with clientgen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 5, "regenerate with clientgen: minor version mismatch");

#include <optional>
#include <string>
#include <vector>

namespace graphql::client {

/// <summary>
/// Operation: query relayQuery
/// </summary>
/// <code class="language-graphql">
/// # Copyright (c) Microsoft Corporation. All rights reserved.
/// # Licensed under the MIT License.
/// 
/// query relayQuery($query: String!, $operationName: String, $variables: String) {
///   relay(query: $query, operationName: $operationName, variables: $variables)
/// }
/// </code>
namespace proxy {

// Return the original text of the request document.
[[nodiscard]] const std::string& GetRequestText() noexcept;

// Return a pre-parsed, pre-validated request object.
[[nodiscard]] const peg::ast& GetRequestObject() noexcept;

} // namespace proxy

namespace query::relayQuery {

using proxy::GetRequestText;
using proxy::GetRequestObject;

// Return the name of this operation in the shared request document.
[[nodiscard]] const std::string& GetOperationName() noexcept;

struct [[nodiscard]] Variables
{
	std::string query {};
	std::optional<std::string> operationName {};
	std::optional<std::string> variables {};
};

[[nodiscard]] response::Value serializeVariables(Variables&& variables);

struct [[nodiscard]] Response
{
	std::optional<std::string> relay {};
};

[[nodiscard]] Response parseResponse(response::Value&& response);

struct Traits
{
	[[nodiscard]] static const std::string& GetRequestText() noexcept;
	[[nodiscard]] static const peg::ast& GetRequestObject() noexcept;
	[[nodiscard]] static const std::string& GetOperationName() noexcept;

	using Variables = relayQuery::Variables;

	[[nodiscard]] static response::Value serializeVariables(Variables&& variables);

	using Response = relayQuery::Response;

	[[nodiscard]] static Response parseResponse(response::Value&& response);
};

} // namespace query::relayQuery
} // namespace graphql::client

#endif // PROXYCLIENT_H
