// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef APPOINTMENTOBJECT_H
#define APPOINTMENTOBJECT_H

#include "TodaySchema.h"

namespace graphql::today::object {

class Appointment
	: public service::Object
{
private:
	service::AwaitableResolver resolveId(service::ResolverParams&& params);
	service::AwaitableResolver resolveWhen(service::ResolverParams&& params);
	service::AwaitableResolver resolveSubject(service::ResolverParams&& params);
	service::AwaitableResolver resolveIsNow(service::ResolverParams&& params);
	service::AwaitableResolver resolveForceError(service::ResolverParams&& params);

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params);

	struct Concept
		: Node
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::optional<response::Value>> getWhen(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<response::StringType>> getSubject(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<response::BooleanType> getIsNow(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<response::StringType>> getForceError(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<response::IdType> getId(service::FieldParams&& params) const final
		{
			return _pimpl->getId(std::move(params));
		}

		service::FieldResult<std::optional<response::Value>> getWhen(service::FieldParams&& params) const final
		{
			return _pimpl->getWhen(std::move(params));
		}

		service::FieldResult<std::optional<response::StringType>> getSubject(service::FieldParams&& params) const final
		{
			return _pimpl->getSubject(std::move(params));
		}

		service::FieldResult<response::BooleanType> getIsNow(service::FieldParams&& params) const final
		{
			return _pimpl->getIsNow(std::move(params));
		}

		service::FieldResult<std::optional<response::StringType>> getForceError(service::FieldParams&& params) const final
		{
			return _pimpl->getForceError(std::move(params));
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	Appointment(std::unique_ptr<Concept>&& pimpl);

	const std::unique_ptr<Concept> _pimpl;

public:
	template <class T>
	Appointment(std::shared_ptr<T> pimpl)
		: Appointment { std::unique_ptr<Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	~Appointment();
};

} // namespace graphql::today::object

#endif // APPOINTMENTOBJECT_H
