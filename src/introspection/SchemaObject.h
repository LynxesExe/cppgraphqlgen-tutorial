// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef SCHEMAOBJECT_H
#define SCHEMAOBJECT_H

#include "IntrospectionSchema.h"

namespace graphql::introspection::object {
namespace methods::SchemaHas {

template <class TImpl>
concept getTypesWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<Type>>> { impl.getTypes(std::move(params)) } };
};

template <class TImpl>
concept getTypes = requires (TImpl impl) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<Type>>> { impl.getTypes() } };
};

template <class TImpl>
concept getQueryTypeWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getQueryType(std::move(params)) } };
};

template <class TImpl>
concept getQueryType = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getQueryType() } };
};

template <class TImpl>
concept getMutationTypeWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getMutationType(std::move(params)) } };
};

template <class TImpl>
concept getMutationType = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getMutationType() } };
};

template <class TImpl>
concept getSubscriptionTypeWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getSubscriptionType(std::move(params)) } };
};

template <class TImpl>
concept getSubscriptionType = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getSubscriptionType() } };
};

template <class TImpl>
concept getDirectivesWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<Directive>>> { impl.getDirectives(std::move(params)) } };
};

template <class TImpl>
concept getDirectives = requires (TImpl impl) 
{
	{ service::FieldResult<std::vector<std::shared_ptr<Directive>>> { impl.getDirectives() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::SchemaHas

class Schema
	: public service::Object
{
private:
	service::AwaitableResolver resolveTypes(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveQueryType(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveMutationType(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveSubscriptionType(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveDirectives(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<std::vector<std::shared_ptr<Type>>> getTypes(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Type>> getQueryType(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Type>> getMutationType(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Type>> getSubscriptionType(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::vector<std::shared_ptr<Directive>>> getDirectives(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<std::vector<std::shared_ptr<Type>>> getTypes(service::FieldParams&&) const final
		{
			return { _pimpl->getTypes() };
		}

		service::FieldResult<std::shared_ptr<Type>> getQueryType(service::FieldParams&&) const final
		{
			return { _pimpl->getQueryType() };
		}

		service::FieldResult<std::shared_ptr<Type>> getMutationType(service::FieldParams&&) const final
		{
			return { _pimpl->getMutationType() };
		}

		service::FieldResult<std::shared_ptr<Type>> getSubscriptionType(service::FieldParams&&) const final
		{
			return { _pimpl->getSubscriptionType() };
		}

		service::FieldResult<std::vector<std::shared_ptr<Directive>>> getDirectives(service::FieldParams&&) const final
		{
			return { _pimpl->getDirectives() };
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	const std::unique_ptr<Concept> _pimpl;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

public:
	GRAPHQLINTROSPECTION_EXPORT Schema(std::shared_ptr<introspection::Schema> pimpl) noexcept;
	GRAPHQLINTROSPECTION_EXPORT ~Schema();
};

} // namespace graphql::introspection::object

#endif // SCHEMAOBJECT_H
