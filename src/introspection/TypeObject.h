// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef TYPEOBJECT_H
#define TYPEOBJECT_H

#include "IntrospectionSchema.h"

namespace graphql::introspection::object {
namespace methods::TypeHas {

template <class TImpl>
concept getKindWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<TypeKind> { impl.getKind(std::move(params)) } };
};

template <class TImpl>
concept getKind = requires (TImpl impl) 
{
	{ service::FieldResult<TypeKind> { impl.getKind() } };
};

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getName() } };
};

template <class TImpl>
concept getDescriptionWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getDescription(std::move(params)) } };
};

template <class TImpl>
concept getDescription = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::string>> { impl.getDescription() } };
};

template <class TImpl>
concept getFieldsWithParams = requires (TImpl impl, service::FieldParams params, std::optional<bool> includeDeprecatedArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<Field>>>> { impl.getFields(std::move(params), std::move(includeDeprecatedArg)) } };
};

template <class TImpl>
concept getFields = requires (TImpl impl, std::optional<bool> includeDeprecatedArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<Field>>>> { impl.getFields(std::move(includeDeprecatedArg)) } };
};

template <class TImpl>
concept getInterfacesWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> { impl.getInterfaces(std::move(params)) } };
};

template <class TImpl>
concept getInterfaces = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> { impl.getInterfaces() } };
};

template <class TImpl>
concept getPossibleTypesWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> { impl.getPossibleTypes(std::move(params)) } };
};

template <class TImpl>
concept getPossibleTypes = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> { impl.getPossibleTypes() } };
};

template <class TImpl>
concept getEnumValuesWithParams = requires (TImpl impl, service::FieldParams params, std::optional<bool> includeDeprecatedArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<EnumValue>>>> { impl.getEnumValues(std::move(params), std::move(includeDeprecatedArg)) } };
};

template <class TImpl>
concept getEnumValues = requires (TImpl impl, std::optional<bool> includeDeprecatedArg) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<EnumValue>>>> { impl.getEnumValues(std::move(includeDeprecatedArg)) } };
};

template <class TImpl>
concept getInputFieldsWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<InputValue>>>> { impl.getInputFields(std::move(params)) } };
};

template <class TImpl>
concept getInputFields = requires (TImpl impl) 
{
	{ service::FieldResult<std::optional<std::vector<std::shared_ptr<InputValue>>>> { impl.getInputFields() } };
};

template <class TImpl>
concept getOfTypeWithParams = requires (TImpl impl, service::FieldParams params) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getOfType(std::move(params)) } };
};

template <class TImpl>
concept getOfType = requires (TImpl impl) 
{
	{ service::FieldResult<std::shared_ptr<Type>> { impl.getOfType() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params) 
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::TypeHas

class Type
	: public service::Object
{
private:
	service::AwaitableResolver resolveKind(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveDescription(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveFields(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveInterfaces(service::ResolverParams&& params) const;
	service::AwaitableResolver resolvePossibleTypes(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveEnumValues(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveInputFields(service::ResolverParams&& params) const;
	service::AwaitableResolver resolveOfType(service::ResolverParams&& params) const;

	service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct Concept
	{
		virtual ~Concept() = default;

		virtual service::FieldResult<TypeKind> getKind(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::string>> getName(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::string>> getDescription(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::shared_ptr<Field>>>> getFields(service::FieldParams&& params, std::optional<bool>&& includeDeprecatedArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> getInterfaces(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> getPossibleTypes(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::shared_ptr<EnumValue>>>> getEnumValues(service::FieldParams&& params, std::optional<bool>&& includeDeprecatedArg) const = 0;
		virtual service::FieldResult<std::optional<std::vector<std::shared_ptr<InputValue>>>> getInputFields(service::FieldParams&& params) const = 0;
		virtual service::FieldResult<std::shared_ptr<Type>> getOfType(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		service::FieldResult<TypeKind> getKind(service::FieldParams&&) const final
		{
			return { _pimpl->getKind() };
		}

		service::FieldResult<std::optional<std::string>> getName(service::FieldParams&&) const final
		{
			return { _pimpl->getName() };
		}

		service::FieldResult<std::optional<std::string>> getDescription(service::FieldParams&&) const final
		{
			return { _pimpl->getDescription() };
		}

		service::FieldResult<std::optional<std::vector<std::shared_ptr<Field>>>> getFields(service::FieldParams&&, std::optional<bool>&& includeDeprecatedArg) const final
		{
			return { _pimpl->getFields(std::move(includeDeprecatedArg)) };
		}

		service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> getInterfaces(service::FieldParams&&) const final
		{
			return { _pimpl->getInterfaces() };
		}

		service::FieldResult<std::optional<std::vector<std::shared_ptr<Type>>>> getPossibleTypes(service::FieldParams&&) const final
		{
			return { _pimpl->getPossibleTypes() };
		}

		service::FieldResult<std::optional<std::vector<std::shared_ptr<EnumValue>>>> getEnumValues(service::FieldParams&&, std::optional<bool>&& includeDeprecatedArg) const final
		{
			return { _pimpl->getEnumValues(std::move(includeDeprecatedArg)) };
		}

		service::FieldResult<std::optional<std::vector<std::shared_ptr<InputValue>>>> getInputFields(service::FieldParams&&) const final
		{
			return { _pimpl->getInputFields() };
		}

		service::FieldResult<std::shared_ptr<Type>> getOfType(service::FieldParams&&) const final
		{
			return { _pimpl->getOfType() };
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	const std::unique_ptr<Concept> _pimpl;

	service::TypeNames getTypeNames() const noexcept;
	service::ResolverMap getResolvers() const noexcept;

public:
	GRAPHQLINTROSPECTION_EXPORT Type(std::shared_ptr<introspection::Type> pimpl) noexcept;
	GRAPHQLINTROSPECTION_EXPORT ~Type();
};

} // namespace graphql::introspection::object

#endif // TYPEOBJECT_H
